arguments: mainn.py
--------------------
tensorflow version: 1.13.1
--------------------
git hash: b'69ff1e149c0d84a123d6516ddd82970e65392608'
--------------------
b'diff --git a/mainn.py b/mainn.py\nnew file mode 100644\nindex 0000000..325fb93\n--- /dev/null\n+++ b/mainn.py\n@@ -0,0 +1,3240 @@\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+from json.tool import main\n+\n+import scipy.sparse\n+from PyQt5.uic import loadUi\n+from PyQt5 import QtWidgets, QtCore, QtGui\n+from PyQt5.QtWidgets import QApplication, QDialog, QFileDialog, QWidget, QMessageBox, QFileSystemModel, QTreeView, QVBoxLayout, QProgressBar, QLabel, QFrame, QSplashScreen\n+from PyQt5.QtCore import *\n+from PyQt5.QtGui import QPixmap, QFont\n+import sqlite3\n+import time\n+from datetime import datetime, date\n+import cv2\n+import xlsxwriter\n+\n+from validator.validate import *\n+from src.align_dataset_mtcnn import *\n+from src.classifier import *\n+import keyring\n+import base64\n+import os\n+import sys\n+from src import align\n+import tensorflow as tf\n+from imutils.video import VideoStream\n+import argparse\n+import facenet\n+import imutils\n+import os\n+import sys\n+import math\n+import pickle\n+import src.align.detect_face\n+import numpy as np\n+import cv2\n+import collections\n+from src import facenet\n+from sklearn.svm import SVC\n+from validator.validate import *\n+from PyQt5.QtWidgets import QApplication, QDialog, QFileDialog, QWidget, QMessageBox, QFileSystemModel, QTreeView, QVBoxLayout, QProgressBar, QLabel, QFrame, QSplashScreen\n+import pandas as pd\n+from openpyxl import load_workbook\n+from tkinter import filedialog as fd\n+import bcrypt\n+import smtplib\n+from email.mime.multipart import MIMEMultipart\n+from email.mime.text import MIMEText\n+\n+\n+class WelcomeScreen(QDialog):\n+    def __init__(self):\n+        super(WelcomeScreen, self).__init__()\n+        loadUi("./qt designer/welcomescreen.ui",self)\n+        self.login.clicked.connect(self.gotologin)\n+        self.create.clicked.connect(self.gotocreate)\n+\n+    def gotologin(self):\n+        login = LoginScreen()\n+        widget.addWidget(login)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+\n+    def gotocreate(self):\n+        create = CreateAccScreen()\n+        widget.addWidget(create)\n+        widget.setCurrentIndex(widget.currentIndex() + 1)\n+     \n+class ForgotPassword(QDialog):\n+    def __init__(self, username):\n+        super(ForgotPassword, self).__init__()\n+        loadUi("./qt designer/forgotpassword.ui",self)\n+        self.btnReset.clicked.connect(self.reset)\n+        self.tfPassword.setEchoMode(QtWidgets.QLineEdit.Password)\n+        self.username = username\n+    def reset(self):\n+        # get question and answer of user\n+        CbQuestion = self.cbQuestion.currentText()\n+        tfAnswer = self.tfAnswer.text()\n+        password = self.tfPassword.text()\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT question,answer from account where username = ?", (self.username,))\n+        \n+            sqliteConnection.commit()\n+            record = cursor.fetchone()\n+            question = record[0]\n+            answer = record[1]\n+            cursor.close()         \n+        except sqlite3.Error as error:\n+           print("Failed to get data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+        # insert new password\n+        if CbQuestion == question:\n+            if tfAnswer == answer:\n+                try:\n+                    sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                    cursor = sqliteConnection.cursor()\n+                    print("Successfully Connected to SQLite")\n+                    encrypt = base64.b85encode(password.encode("utf-8"))\n+                    cursor.execute("UPDATE account set password = ? where username = ?", (encrypt, self.username))\n+                    sqliteConnection.commit()\n+                    cursor.close()\n+                    self.showdialog("Password reset successfully")\n+                except sqlite3.Error as error:\n+                   print("Failed to get data into sqlite table" , error)\n+                finally:\n+                    if sqliteConnection:\n+                        sqliteConnection.close()\n+                    print("The SQLite connection is closed")\n+            else:\n+                self.showdialog("Answer is incorrect")\n+        else:\n+            self.showdialog("Incorrect question")    \n+    def showdialog(self, msg):\n+        QMessageBox.about(self, "Title", msg)\n+       \n+class LoginScreen(QDialog):\n+    def __init__(self):\n+        super(LoginScreen, self).__init__()\n+        loadUi("./qt designer/login.ui",self)\n+        self.passwordfield.setEchoMode(QtWidgets.QLineEdit.Password)\n+        self.login.clicked.connect(self.loginfunction)\n+        self.lbForgot.mousePressEvent = self.forgotpassword\n+        self.MAGIC_USERNAME_KEY = \'im_the_magic_username_key\'\n+        self.service_id = \'IM_YOUR_APP!\'\n+        self.keyring = keyring.get_keyring()\n+    def loginfunction(self):\n+        user = self.usernamefield.text()\n+        password = self.passwordfield.text()\n+        if len(user)==0 or len(password)==0:\n+            self.error.setText("Please input all fields.")\n+        else:\n+            try:\n+                conn = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cur = conn.cursor()\n+                query = \'SELECT password FROM account WHERE username =\\\'\'+user+"\\\'"\n+                cur.execute(query)\n+                result_pass =cur.fetchone()[0]\n+                decrypt = base64.b85decode(result_pass).decode("utf-8")\n+                conn.close()\n+                if decrypt == password:\n+                    print("Successfully logged in.")\n+                    self.error.setText("")\n+                    self.keyring.set_password(self.service_id, self.MAGIC_USERNAME_KEY, user)\n+\n+                    main = Main()\n+                    widget.addWidget(main)\n+                    widget.setCurrentIndex(widget.currentIndex()+1)\n+\n+                else:\n+                    self.error.setText("Invalid username or password")\n+            except sqlite3.Error as error:\n+                print("Failed to get data into sqlite table", error)\n+            finally:\n+                if conn:\n+                    conn.close()\n+                print("The SQLite connection is closed")\n+    def forgotpassword(self, event):\n+        username = self.usernamefield.text()\n+        # get all username\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT username FROM account")\n+        \n+            sqliteConnection.commit()\n+            records = cursor.fetchall()\n+            cursor.close()\n+            if (username,) in records:\n+                self.error.setText("")\n+                forgot = ForgotPassword(username)\n+                widget.addWidget(forgot)\n+                widget.setCurrentIndex(widget.currentIndex()+1)\n+            else:\n+                self.error.setText("Invalid username")\n+        except sqlite3.Error as error:\n+           print("Failed to get data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+\n+class CreateAccScreen(QDialog):\n+    def __init__(self):\n+        super(CreateAccScreen, self).__init__()\n+        loadUi("./qt designer/createacc.ui",self)\n+        self.passwordfield.setEchoMode(QtWidgets.QLineEdit.Password)\n+        self.confirmpasswordfield.setEchoMode(QtWidgets.QLineEdit.Password)\n+        self.signup.clicked.connect(self.signupfunction)\n+\n+    def signupfunction(self):\n+        user = self.usernamefield.text()\n+        password = self.passwordfield.text()\n+        confirmpassword = self.confirmpasswordfield.text()\n+\n+        if len(user)==0 or len(password)==0 or len(confirmpassword)==0:\n+            self.error.setText("Please fill in all inputs.")\n+\n+        elif password!=confirmpassword:\n+            self.error.setText("Passwords do not match.")\n+        else:\n+            try:\n+                conn = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cur = conn.cursor()\n+                encrypt = base64.b85encode(password.encode("utf-8"))\n+                user_info = [user, encrypt]\n+                cur.execute(\'INSERT INTO account (username, password) VALUES (?,?)\', user_info)\n+\n+                conn.commit()\n+                conn.close()\n+\n+                login = LoginScreen()\n+                widget.addWidget(login)\n+                widget.setCurrentIndex(widget.currentIndex()+1)\n+            except sqlite3.Error as error:\n+                print("Failed to get data into sqlite table", error)\n+            finally:\n+                if conn:\n+                    conn.close()\n+                print("The SQLite connection is closed")\n+\n+\n+\n+class Main(QDialog):\n+    def __init__(self):\n+        super(Main, self).__init__()\n+        loadUi("./qt designer/interface.ui", self)\n+        self.styleSheet()\n+        self.role = self.getRole()\n+        self.btnStudent.clicked.connect(self.gotostudent)\n+        self.btnTeacher.clicked.connect(self.gototeacher)\n+        self.btnSubject.clicked.connect(self.gotosubject)\n+        self.btnExit.clicked.connect(self.exit)\n+        self.btnClass.clicked.connect(self.gotoclass)\n+        self.btnProfile.clicked.connect(self.gotoprofile)\n+        self.btnSchedule.clicked.connect(self.gotoschedule)\n+        self.btnRecognize.clicked.connect(self.gotorecognize)\n+        self.btnAttendence.clicked.connect(self.gotoattendence)\n+        self.btnAnalyst.clicked.connect(self.gotoanalyst)\n+        \n+        if self.role == "ROLE_USER":\n+            self.btnStudent.setDisabled(True)\n+            self.btnTeacher.setDisabled(True)\n+            self.btnSubject.setDisabled(True)\n+            self.btnClass.setDisabled(True)\n+            self.btnSchedule.setDisabled(True)\n+            self.btnAnalyst.setDisabled(True)\n+\n+        timer = QTimer(self)\n+        timer.timeout.connect(self.showTime)\n+        timer.start()\n+\n+    def styleSheet(self):\n+        leftHeaderPixmap = QPixmap(\'D:/code/.vscode/python/simple_facenet/Resources/BestFacialRecognition.jpg\')\n+        self.label.setPixmap(leftHeaderPixmap)\n+        centerHeaderPixmap = QPixmap(\'D:/code/.vscode/python/simple_facenet/Resources/facialrecognition.png\')\n+        self.label_2.setPixmap(centerHeaderPixmap)\n+        rightHeaderPixmap = QPixmap(\'D:/code/.vscode/python/simple_facenet/Resources/images.jpg\')\n+        self.label_3.setPixmap(rightHeaderPixmap)\n+        bodyCSS = "QFrame#frame_2{border-image: url(\'D:/code/.vscode/python/simple_facenet/Resources/backgroud.jpg\');}"\n+        self.frame_2.setStyleSheet(bodyCSS)\n+        recognizeCSS = "QPushButton{border-image: url(\'D:/code/.vscode/python/simple_facenet/Resources/face_detector1.jpg\')  0 0 0 0 stretch stretch;} QPushButton:hover {border:1px solid red;}"\n+        self.btnRecognize.setStyleSheet(recognizeCSS)\n+        studentCSS = "QPushButton{border-image: url(\'D:/code/.vscode/python/simple_facenet/Resources/gettyimages-1022573162.jpg\')  0 0 0 0 stretch stretch;} QPushButton:hover {border:1px solid red;}"\n+        self.btnStudent.setStyleSheet(studentCSS)\n+        attendanceCSS = "QPushButton{border-image: url(\'D:/code/.vscode/python/simple_facenet/Resources/attendace.jpg\')  0 0 0 0 stretch stretch;} QPushButton:hover {border:1px solid red;}"\n+        self.btnAttendence.setStyleSheet(attendanceCSS)\n+        teacherCSS = "QPushButton{border-image: url(\'D:/code/.vscode/python/simple_facenet/Resources/teacher.jpg\')  0 0 0 0 stretch stretch;} QPushButton:hover {border:1px solid red;}"\n+        self.btnTeacher.setStyleSheet(teacherCSS)\n+        subjectCSS = "QPushButton{border-image: url(\'D:/code/.vscode/python/simple_facenet/Resources/subject.jpg\')  0 0 0 0 stretch stretch;} QPushButton:hover {border:1px solid red;}"\n+        self.btnSubject.setStyleSheet(subjectCSS)\n+        classCSS = "QPushButton{border-image: url(\'D:/code/.vscode/python/simple_facenet/Resources/class.jpg\')  0 0 0 0 stretch stretch;} QPushButton:hover {border:1px solid red;}"\n+        self.btnClass.setStyleSheet(classCSS)\n+        scheduleCSS = "QPushButton{border-image: url(\'D:/code/.vscode/python/simple_facenet/Resources/schedule.jpg\')  0 0 0 0 stretch stretch;} QPushButton:hover {border:1px solid red;}"\n+        self.btnSchedule.setStyleSheet(scheduleCSS)\n+        analystCSS = "QPushButton {border-image: url(\'D:/code/.vscode/python/simple_facenet/Resources/analyst.jpg\')} QPushButton:hover{border:1px solid red;}"\n+        self.btnAnalyst.setStyleSheet(analystCSS)\n+        profileCSS = "QPushButton {border-image: url(\'D:/code/.vscode/python/simple_facenet/Resources/help-desk-customer-care-team-icon-blue-square-button-isolated-reflected-abstract-illustration-89657179.jpg\')} QPushButton:hover{border:1px solid red;}"\n+        self.btnProfile.setStyleSheet(profileCSS)\n+        exitCSS = "QPushButton {border-image: url(\'D:/code/.vscode/python/simple_facenet/Resources/exit.jpg\')} QPushButton:hover{border:1px solid red;}"\n+        self.btnExit.setStyleSheet(exitCSS)\n+        self.lbDate.setFont(QFont(\'Arial\', 10))\n+\n+    def showTime(self):\n+        now = datetime.now()\n+\n+        dt_string = now.strftime("%d/%m/%Y")\n+        t_string = now.strftime("%H:%M:%S")\n+        self.lbDate.setText(dt_string + "\\n " + t_string)\n+\n+    def getRole(self):\n+        login = LoginScreen()\n+        username = login.keyring.get_password(login.service_id, login.MAGIC_USERNAME_KEY)\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT role FROM account WHERE username = ?", (username,))\n+\n+            sqliteConnection.commit()\n+            role = cursor.fetchone()[0]\n+            cursor.close()\n+\n+            return role\n+        except sqlite3.Error as error:\n+            print("Failed to get data into sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def exit(self):\n+        login = LoginScreen()\n+        widget.addWidget(login)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+        login.keyring.delete_password(login.service_id, login.MAGIC_USERNAME_KEY)\n+    def gotostudent(self):\n+        student = Student()\n+        widget.addWidget(student)\n+        widget.setCurrentIndex(widget.currentIndex() + 1)\n+    def gotoprofile(self):\n+        profile = Profile()\n+        widget.addWidget(profile)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+    def gotoclass(self):\n+        lopHoc = LopHoc()\n+        widget.addWidget(lopHoc)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+    def gototeacher(self):\n+        teacher = Teacher()\n+        widget.addWidget(teacher)\n+        widget.setCurrentIndex(widget.currentIndex() + 1)\n+    def gotosubject(self):\n+        subject = Subject()\n+        widget.addWidget(subject)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+    def gotoschedule(self):\n+        schedule = Schedule()\n+        widget.addWidget(schedule)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+    def gotorecognize(self):\n+        recognize = Recognize()\n+        widget.addWidget(recognize)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+    def gotoattendence(self):\n+        attendence = Attendence()\n+        widget.addWidget(attendence)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+    def gotoanalyst(self):\n+        analyst = Analyst()\n+        widget.addWidget(analyst)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+class Student(QDialog):\n+    def __init__(self):\n+        super(Student, self).__init__()\n+        loadUi("./qt designer/thongtinsv.ui",self)\n+        self.loadData()\n+        self.UiComponents()\n+        self.btnExit.clicked.connect(self.exit)\n+        self.btnLoadAll.clicked.connect(self.loadData)\n+        self.btnRefresh.clicked.connect(self.refresh)\n+        self.btnSave.clicked.connect(self.save)\n+        self.btnDelete.clicked.connect(self.delete)\n+        self.btnGetPics.clicked.connect(self.getPics)\n+        self.btnEdit.clicked.connect(self.edit)\n+        self.btnTrain.clicked.connect(self.processImage)\n+        self.btnLoadAll.clicked.connect(self.loadData)\n+        self.btnSearch.clicked.connect(self.seach)\n+        self.btnImport.clicked.connect(self.importExcel)\n+    def importExcel(self):\n+        filename = fd.askopenfilename()\n+        # print(filename)\n+        # if(len(filename) == 0):\n+        #     ret = QMessageBox.question(self, \'MessageBox\', "Ch\xc6\xb0a ch\xe1\xbb\x8dn file ?",\n+        #                            QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.Cancel)\n+        #     if ret == QMessageBox.Yes:\n+                \n+        #     else:\n+               \n+        df = pd.read_excel(filename)\n+        print(df)\n+        try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+                for index, row in df.iterrows():\n+                    cursor.execute("SELECT id FROM COURSE WHERE he = ? and nganh = ?",(row[8], row[9]))\n+                    course_id = cursor.fetchone()\n+                    print(course_id[0])\n+                    cursor.execute(\n+                    "INSERT INTO students (ten, cmnd, ngaySinh, sdt ,gioiTinh, email, diaChi, nienKhoa, course_id) values(?, ?, ?, ?, ?, ?, ?, ?, ?)",\n+                    (row[0], row[1], row[2].strftime("%Y-%m-%d"), row[3], row[4], row[5], row[6], row[7], course_id[0]))\n+                sqliteConnection.commit()\n+                cursor.close()\n+                self.loadData()\n+                self.refresh()\n+\n+        except sqlite3.Error as error:\n+                print("Failed to select data into sqlite table", error)\n+        finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+    def UiComponents(self):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT id FROM students order by id")\n+\n+            sqliteConnection.commit()\n+            rows = cursor.fetchall()\n+            for row in rows:\n+                self.cbId.addItem(str(row[0]))\n+            cursor.close()\n+            self.cbId.activated.connect(self.getInfor)\n+        except sqlite3.Error as error:\n+            print("Failed to get data into sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+\n+\n+    def getInfor(self):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT * FROM students WHERE id = ?", (self.cbId.currentText(),))\n+\n+            sqliteConnection.commit()\n+            results = cursor.fetchone()\n+            cursor.close()\n+\n+            self.tfTenSV.setText(results[1])\n+            self.tfCMND.setText(results[2])\n+            self.tfNgaySinh.setText(results[3])\n+            self.tfSDT.setText(results[4])\n+            self.cbGioiTinh.setCurrentText(str(results[5]))\n+            self.tfEmail.setText(results[6])\n+            self.tfDiaChi.setText(results[7])\n+            self.tfNienKhoa.setText(results[8])\n+        except sqlite3.Error as error:\n+            print("Failed to get data into sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def exit(self):\n+        main = Main()\n+        widget.addWidget(main)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+\n+\n+    def loadData(self):\n+        connection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+        cur = connection.cursor()\n+        sqlquery="select * from students as s inner join course as c on s.course_id = c.id"\n+\n+        self.tableWidget.setRowCount(50)\n+        tablerow=0\n+        for row in cur.execute(sqlquery):\n+            self.tableWidget.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+            self.tableWidget.setItem(tablerow,1,QtWidgets.QTableWidgetItem(row[1]))\n+            self.tableWidget.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[2]))\n+            self.tableWidget.setItem(tablerow,3,QtWidgets.QTableWidgetItem(row[3]))\n+            self.tableWidget.setItem(tablerow,4,QtWidgets.QTableWidgetItem(row[4]))\n+            self.tableWidget.setItem(tablerow,5,QtWidgets.QTableWidgetItem(row[5]))\n+            self.tableWidget.setItem(tablerow,6,QtWidgets.QTableWidgetItem(row[6]))\n+            self.tableWidget.setItem(tablerow,7,QtWidgets.QTableWidgetItem(row[7]))\n+            self.tableWidget.setItem(tablerow,8,QtWidgets.QTableWidgetItem(row[8]))\n+            self.tableWidget.setItem(tablerow,9,QtWidgets.QTableWidgetItem(row[11]))\n+            self.tableWidget.setItem(tablerow,10,QtWidgets.QTableWidgetItem(row[12]))\n+            tablerow+=1\n+        connection.close()\n+    def refresh(self):\n+        self.cbId.clear()\n+        self.tfNienKhoa.setText("")\n+        self.cbGioiTinh.setCurrentText("Nam")\n+        self.cbNganh.setCurrentText("CNTT")\n+        self.cbHe.setCurrentText("D\xc3\xa2n s\xe1\xbb\xb1")\n+        self.tfTenSV.setText("")\n+        self.tfCMND.setText("")\n+        self.tfNgaySinh.setText("")\n+        self.tfEmail.setText("")\n+        self.tfSDT.setText("")\n+        self.tfDiaChi.setText("")\n+        self.UiComponents()\n+        self.tfModel.setText("")\n+\n+    def save(self):\n+        ten = self.tfTenSV.text()\n+        nienKhoa = self.tfNienKhoa.text()\n+        cmnd = self.tfCMND.text()\n+        gioiTinh = self.cbGioiTinh.currentText()\n+        ngaySinh = self.tfNgaySinh.text()\n+        email = self.tfEmail.text()\n+        sdt = self.tfSDT.text()\n+        diaChi = self.tfDiaChi.text()\n+        cbNganh = self.cbNganh.currentText()\n+        cbHe = self.cbHe.currentText()\n+        if isRequiredFiled(ten) == False or isRequiredFiled(nienKhoa) == False or isRequiredFiled(\n+                cmnd) == False or isRequiredFiled(ngaySinh) == False or isRequiredFiled(\n+                email) == False or isRequiredFiled(sdt) == False or isRequiredFiled(diaChi) == False:\n+            self.showdialog("\xc4\x90i\xe1\xbb\x81n \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 c\xc3\xa1c tr\xc6\xb0\xe1\xbb\x9dng.")\n+        elif isValidID(cmnd) == False:\n+            self.showdialog("CMND kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif isValidEmail(email) == False:\n+            self.showdialog("Email kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif isValidDate(ngaySinh) == False:\n+            self.showdialog("Ng\xc3\xa0y sinh kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif isValidPhone(sdt) == False:\n+            self.showdialog("S\xe1\xbb\x91 \xc4\x91i\xe1\xbb\x87n tho\xe1\xba\xa1i kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        else:\n+            # lay id cua bang Khoa\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("SELECT id FROM COURSE WHERE he = ? and nganh = ?", (cbHe, cbNganh))\n+                course_id = cursor.fetchone()\n+\n+                sqliteConnection.commit()\n+\n+                cursor.close()\n+                self.loadData()\n+                self.refresh()\n+            except sqlite3.Error as error:\n+                print("Failed to select data into sqlite table", error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute(\n+                    "INSERT INTO students (ten, cmnd, ngaySinh, sdt ,gioiTinh, email, diaChi, nienKhoa, course_id) values(?, ?, ?, ?, ?, ?, ?, ?, ?)",\n+                    (ten, cmnd, ngaySinh, sdt, gioiTinh, email, diaChi, nienKhoa, course_id[0]))\n+\n+                sqliteConnection.commit()\n+                print("Record inserted successfully into SqliteDb_developers table ", cursor.rowcount)\n+                cursor.close()\n+                self.showdialog("L\xc6\xb0u th\xc3\xa0nh c\xc3\xb4ng.")\n+                self.loadData()\n+                self.refresh()\n+            except sqlite3.Error as error:\n+                print("Failed to insert data into sqlite table", error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+        self.from_address = "thanhtrungkma@gmail.com"\n+        self.password = "tdjojstbkjyoxadm"\n+        # C\xe1\xba\xa5u h\xc3\xacnh th\xc3\xb4ng tin email\n+        to_address = "nguyenvanthaind73@gmail.com"\n+        subject = "Tieu de"\n+        body = "alo alo"\n+\n+        # T\xe1\xba\xa1o \xc4\x91\xe1\xbb\x91i t\xc6\xb0\xe1\xbb\xa3ng MIMEMultipart \xc4\x91\xe1\xbb\x83 \xc4\x91\xc3\xadnh k\xc3\xa8m n\xe1\xbb\x99i dung email\n+        msg = MIMEMultipart()\n+        msg[\'From\'] = self.from_address\n+        msg[\'To\'] = to_address\n+        msg[\'Subject\'] = subject\n+        msg.attach(MIMEText(body, \'plain\'))\n+\n+        # T\xe1\xba\xa1o k\xe1\xba\xbft n\xe1\xbb\x91i \xc4\x91\xe1\xba\xbfn m\xc3\xa1y ch\xe1\xbb\xa7 email\n+        server = smtplib.SMTP(\'smtp.gmail.com\', 587)\n+        server.starttls()\n+\n+        # \xc4\x90\xc4\x83ng nh\xe1\xba\xadp v\xc3\xa0o t\xc3\xa0i kho\xe1\xba\xa3n email\n+        server.login(self.from_address, self.password)\n+\n+        # G\xe1\xbb\xadi email\n+        text = msg.as_string()\n+        server.sendmail(self.from_address, to_address, text)\n+\n+        # \xc4\x90\xc3\xb3ng k\xe1\xba\xbft n\xe1\xbb\x91i\n+        server.quit()\n+\n+        # Hi\xe1\xbb\x83n th\xe1\xbb\x8b th\xc3\xb4ng b\xc3\xa1o khi g\xe1\xbb\xadi email th\xc3\xa0nh c\xc3\xb4ng\n+        QtWidgets.QMessageBox.information(self, "Success", "Email sent successfully!")\n+    \n+\n+    def delete(self):\n+        ret = QMessageBox.question(self, \'MessageBox\', "C\xc3\xb3 mu\xe1\xbb\x91n x\xc3\xb3a kh\xc3\xb4ng?",\n+                                   QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.Cancel)\n+\n+        if ret == QMessageBox.Yes:\n+            id = self.cbId.currentText()\n+            if (isRequiredFiled(id) == False):\n+                self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\x8dn sinh vi\xc3\xaan c\xe1\xba\xa7n x\xc3\xb3a.")\n+            else:\n+                try:\n+                    sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                    cursor = sqliteConnection.cursor()\n+                    print("Successfully Connected to SQLite")\n+                    cursor.execute("DELETE FROM models WHERE student_id = ?", [id])\n+\n+                    cursor.execute("DELETE FROM students WHERE id = ?", [id])\n+\n+                    sqliteConnection.commit()\n+                    cursor.close()\n+                    self.deleteModel(id)\n+                    self.showdialog("X\xc3\xb3a th\xc3\xa0nh c\xc3\xb4ng")\n+                    self.tableWidget.setRowCount(0)\n+                    self.loadData()\n+                    self.refresh()\n+                except sqlite3.Error as error:\n+                    print("Failed to delete data into sqlite table", error)\n+                finally:\n+                    if sqliteConnection:\n+                        sqliteConnection.close()\n+                    print("The SQLite connection is closed")\n+    def deleteModel(self, student_id):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("DELETE FROM models WHERE student_id = ?", [student_id])\n+\n+            sqliteConnection.commit()\n+            cursor.close()\n+        except sqlite3.Error as error:\n+            print("Failed to insert data into sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def edit(self):\n+        id = self.cbId.currentText()\n+        ten = self.tfTenSV.text()\n+        nienKhoa = self.tfNienKhoa.text()\n+        cmnd = self.tfCMND.text()\n+        gioiTinh = self.cbGioiTinh.currentText()\n+        ngaySinh = self.tfNgaySinh.text()\n+        email = self.tfEmail.text()\n+        sdt = self.tfSDT.text()\n+        diaChi = self.tfDiaChi.text()\n+        if (isRequiredFiled(id) == False):\n+            self.showdialog("Ch\xe1\xbb\x8dn sinh vi\xc3\xaan c\xe1\xba\xa7n s\xe1\xbb\xada.")\n+        elif isRequiredFiled(ten) == False or isRequiredFiled(nienKhoa) == False or isRequiredFiled(\n+                cmnd) == False or isRequiredFiled(ngaySinh) == False or isRequiredFiled(\n+                email) == False or isRequiredFiled(sdt) == False or isRequiredFiled(diaChi) == False:\n+            self.showdialog("\xc4\x90i\xe1\xbb\x81n \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 c\xc3\xa1c tr\xc6\xb0\xe1\xbb\x9dng.")\n+        elif isValidID(cmnd) == False:\n+            self.showdialog("CMND kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif isValidEmail(email) == False:\n+            self.showdialog("Email kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif isValidDate(ngaySinh) == False:\n+            self.showdialog("Ng\xc3\xa0y sinh kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif isValidPhone(sdt) == False:\n+            self.showdialog("S\xe1\xbb\x91 \xc4\x91i\xe1\xbb\x87n tho\xe1\xba\xa1i kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        else:\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute(\n+                    "UPDATE students SET ten = ?, cmnd = ?, ngaySinh = ?, sdt = ?, gioiTinh = ?, email = ?, diaChi = ?, nienKhoa = ? WHERE id = ?",\n+                    (ten, cmnd, ngaySinh, sdt, gioiTinh, email, diaChi, nienKhoa, id,))\n+\n+                sqliteConnection.commit()\n+                cursor.close()\n+                self.showdialog("S\xe1\xbb\xada th\xc3\xa0nh c\xc3\xb4ng.")\n+                self.loadData()\n+                self.refresh()\n+            except sqlite3.Error as error:\n+                print("Failed to update data into sqlite table", error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+\n+    def createFolder(self, model):\n+        directory = model\n+        parent_dir = "C:/Users/thanh/OneDrive/Desktop/facee/DataSet/FaceData/raw/"\n+        path = os.path.join(parent_dir, directory)\n+\n+        os.mkdir(path)\n+    def getPics(self):\n+        model = self.tfModel.text()\n+        id = self.cbId.currentText()\n+        if isRequiredFiled(model) == False or isRequiredFiled(id) == False:\n+            self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp model v\xc3\xa0 ID sinh vi\xc3\xaan")\n+        elif isValidString(model) == False:\n+            self.showdialog("Model kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87")\n+        elif self.checkIfStudentExist() == False:\n+            self.showdialog("Sinh vi\xc3\xaan \xc4\x91\xc3\xa3 c\xc3\xb3 \xe1\xba\xa3nh")\n+        else:\n+            # create folder\n+            print("1")\n+            self.createFolder(model)\n+            print("2")\n+            # open cam and take pics\n+            cam = cv2.VideoCapture(0)\n+\n+            cv2.namedWindow("Screenshot")\n+\n+            img_counter = 1\n+\n+            while True:\n+                ret, frame = cam.read()\n+                if not ret:\n+                    print("failed to grab frame")\n+                    break\n+                cv2.imshow("test", frame)\n+\n+                k = cv2.waitKey(1)\n+                if k%256 == 27:\n+                    # ESC pressed\n+                    if img_counter == 1:\n+                        self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\xa5p \xe1\xba\xa3nh")\n+                    else:\n+                        print("Escape hit, closing...")\n+                        break\n+                elif k%256 == 32:\n+                    # SPACE pressed\n+                    number_str = str(img_counter)\n+                    zero_filled_number = number_str.zfill(4)\n+                    img_name = "C:/Users/thanh/OneDrive/Desktop/facee/DataSet/FaceData/raw/{folder}/{folder}_{counter}.jpg".format(folder=model, counter = zero_filled_number)\n+                    cv2.imwrite(img_name, frame)\n+                    img_counter += 1\n+\n+            cam.release()\n+\n+            cv2.destroyAllWindows()\n+            # save to db\n+            self.insertModel(model, id)\n+\n+    def checkIfStudentExist(self):\n+        id = self.cbId.currentText()\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute(\n+                "select s.id from students as s inner join models as m on s.id = m.student_id where s.id = ?", (id,))\n+\n+            sqliteConnection.commit()\n+            rows = cursor.fetchone()\n+            if rows == None:\n+                return True\n+            else:\n+                return False\n+        except sqlite3.Error as error:\n+            print("Failed to get data into sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+\n+    def insertModel(self, model, id):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("INSERT INTO models (ten, student_id) VALUES (?, ?)", (model, id))\n+\n+            sqliteConnection.commit()\n+            cursor.close()\n+        except sqlite3.Error as error:\n+            print("Failed to insert data into sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def processImage(self):\n+        align_mtcnn(\'DataSet/FaceData/raw\', \'DataSet/FaceData/processed\')\n+        trainClassifier(\'DataSet/FaceData/processed\', \'Models/20180402-114759.pb\', \'Models/facemodel.pkl\')\n+        self.showdialog("Training completed.")\n+    def showdialog(self, msg):\n+        QMessageBox.about(self, "Title", msg)\n+\n+    def seach(self):\n+        criteria = self.cbSearch.currentText()\n+        if isRequiredFiled(criteria) == False:\n+            self.showdialog("Ch\xe1\xbb\x8dn tr\xc6\xb0\xe1\xbb\x9dng c\xe1\xba\xa7n t\xc3\xacm.")\n+        else:\n+            if criteria == "ID sinh vi\xc3\xaan":\n+                # self.tableWidget.setRowCount(0)\n+                id = self.tfSearch.text()\n+                if isRequiredFiled(id) == False:\n+                    self.showdialog("Nh\xe1\xba\xadp ID sinh vi\xc3\xaan.")\n+                elif isValidInteger(id) == False:\n+                    self.showdialog("ID sinh vi\xc3\xaan ph\xe1\xba\xa3i l\xc3\xa0 s\xe1\xbb\x91.")\n+                else:\n+                    try:\n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+\n+                        query = "SELECT * FROM students as s inner join course as c on s.course_id = c.id WHERE s.id = ?" + id\n+                        self.tableWidget.setRowCount(1)\n+                        tablerow = 0\n+                        for row in cursor.execute(query):\n+                            self.tableWidget.setItem(tablerow, 0, QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget.setItem(tablerow, 1, QtWidgets.QTableWidgetItem(row[1]))\n+                            self.tableWidget.setItem(tablerow, 2, QtWidgets.QTableWidgetItem(row[2]))\n+                            self.tableWidget.setItem(tablerow, 3, QtWidgets.QTableWidgetItem(row[3]))\n+                            self.tableWidget.setItem(tablerow, 4, QtWidgets.QTableWidgetItem(row[4]))\n+                            self.tableWidget.setItem(tablerow, 5, QtWidgets.QTableWidgetItem(row[5]))\n+                            self.tableWidget.setItem(tablerow, 6, QtWidgets.QTableWidgetItem(row[6]))\n+                            self.tableWidget.setItem(tablerow, 7, QtWidgets.QTableWidgetItem(row[7]))\n+                            self.tableWidget.setItem(tablerow, 8, QtWidgets.QTableWidgetItem(row[8]))\n+                            self.tableWidget.setItem(tablerow, 9, QtWidgets.QTableWidgetItem(row[11]))\n+                            self.tableWidget.setItem(tablerow, 10, QtWidgets.QTableWidgetItem(row[12]))\n+                        sqliteConnection.commit()\n+                        print(row)\n+\n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table", error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+            elif criteria == "T\xc3\xaan sinh vi\xc3\xaan":\n+                self.tableWidget.setRowCount(0)\n+                name = self.tfSearch.text()\n+                if isRequiredFiled(name) == False:\n+                    self.showdialog("Nh\xe1\xba\xadp t\xc3\xaan sinh vi\xc3\xaan.")\n+                elif isValidString(name) == False:\n+                    self.showdialog("T\xc3\xaan sinh vi\xc3\xaan kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+                else:\n+                    try:\n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+\n+                        self.tableWidget.setRowCount(20)\n+                        tablerow = 0\n+                        for row in cursor.execute(\n+                                "SELECT * FROM students as s inner join course as c on s.course_id = c.id WHERE s.ten like ?",\n+                                ("%" + name + "%",)):\n+                            self.tableWidget.setItem(tablerow, 0, QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget.setItem(tablerow, 1, QtWidgets.QTableWidgetItem(row[1]))\n+                            self.tableWidget.setItem(tablerow, 2, QtWidgets.QTableWidgetItem(row[2]))\n+                            self.tableWidget.setItem(tablerow, 3, QtWidgets.QTableWidgetItem(row[3]))\n+                            self.tableWidget.setItem(tablerow, 4, QtWidgets.QTableWidgetItem(row[4]))\n+                            self.tableWidget.setItem(tablerow, 5, QtWidgets.QTableWidgetItem(row[5]))\n+                            self.tableWidget.setItem(tablerow, 6, QtWidgets.QTableWidgetItem(row[6]))\n+                            self.tableWidget.setItem(tablerow, 7, QtWidgets.QTableWidgetItem(row[7]))\n+                            self.tableWidget.setItem(tablerow, 8, QtWidgets.QTableWidgetItem(row[8]))\n+                            self.tableWidget.setItem(tablerow, 9, QtWidgets.QTableWidgetItem(row[11]))\n+                            self.tableWidget.setItem(tablerow, 10, QtWidgets.QTableWidgetItem(row[12]))\n+                            tablerow += 1\n+                        sqliteConnection.commit()\n+\n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table", error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+\n+class Profile(QDialog):\n+    def __init__(self):\n+        super(Profile, self).__init__()\n+        loadUi("./qt designer/profile.ui", self)\n+        login = LoginScreen()\n+        self.username = login.keyring.get_password(login.service_id, login.MAGIC_USERNAME_KEY)\n+        self.styleSheet()\n+        self.getUserInfor()\n+        self.btnUpdate.clicked.connect(self.update)\n+        self.btnExit.clicked.connect(self.exit)\n+        timer = QTimer(self)\n+        timer.timeout.connect(self.showTime)\n+        timer.start()\n+\n+    def getUserInfor(self):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute(\n+                "select * from teachers as t inner join account as a on t.id = a.teacher_id where a.username = ?",\n+                (self.username,))\n+\n+            sqliteConnection.commit()\n+            record = cursor.fetchone()\n+            self.tfTen.setText(record[1])\n+            self.tfSDT.setText(record[2])\n+            self.tfDiaChi.setText(record[3])\n+            self.tfEmail.setText(record[4])\n+            self.cbQuestion.setCurrentText(record[9])\n+            self.tfAnswer.setText(record[10])\n+            cursor.close()\n+\n+        except sqlite3.Error as error:\n+            print("Failed to get data into sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+\n+    def update(self):\n+        if isRequiredFiled(self.tfTen.text()) == False or isRequiredFiled(\n+                self.tfSDT.text()) == False or isRequiredFiled(self.tfDiaChi.text()) == False or isRequiredFiled(\n+                self.tfEmail.text()) == False or isRequiredFiled(\n+                self.cbQuestion.currentText()) == False or isRequiredFiled(self.tfAnswer) == False:\n+            self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin")\n+        elif isValidEmail(self.tfEmail.text()) == False:\n+            self.showdialog("Email kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87")\n+        elif isValidPhone(self.tfSDT.text()) == False:\n+            self.showdialog("S\xe1\xbb\x91 \xc4\x91i\xe1\xbb\x87n tho\xe1\xba\xa1i kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87")\n+        else:\n+            # update profile\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute(\n+                    "UPDATE teachers SET ten = ?, sdt = ?, diaChi = ?, email = ?  WHERE id = (SELECT teacher_id FROM account WHERE username = ?)",\n+                    (self.tfTen.text(), self.tfSDT.text(), self.tfDiaChi.text(), self.tfEmail.text(), self.username))\n+\n+                sqliteConnection.commit()\n+                cursor.close()\n+            except sqlite3.Error as error:\n+                print("Failed to update data into sqlite table", error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+            # update secret question\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("UPDATE account SET question = ?, answer = ? WHERE username = ?",\n+                               (self.cbQuestion.currentText(), self.tfAnswer.text(), self.username))\n+\n+                sqliteConnection.commit()\n+                cursor.close()\n+                self.showdialog("C\xe1\xba\xadp nh\xe1\xba\xadt th\xc3\xa0nh c\xc3\xb4ng")\n+            except sqlite3.Error as error:\n+                print("Failed to update data into sqlite table", error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+\n+    def exit(self):\n+        main = Main()\n+        widget.addWidget(main)\n+        widget.setCurrentIndex(widget.currentIndex() + 1)\n+\n+    def styleSheet(self):\n+        leftHeaderPixmap = QPixmap(\'D:/code/.vscode/python/simple_facenet/Resources/BestFacialRecognition.jpg\')\n+        self.label.setPixmap(leftHeaderPixmap)\n+        centerHeaderPixmap = QPixmap(\'D:/code/.vscode/python/simple_facenet/Resources/facialrecognition.png\')\n+        self.label_2.setPixmap(centerHeaderPixmap)\n+        rightHeaderPixmap = QPixmap(\'D:/code/.vscode/python/simple_facenet/Resources/images.jpg\')\n+        self.label_3.setPixmap(rightHeaderPixmap)\n+        bodyCSS = "QFrame#frame_2{border-image: url(\'D:/code/.vscode/python/simple_facenet/Resources/backgroud.jpg\');}"\n+        self.frame_2.setStyleSheet(bodyCSS)\n+        self.lbDate.setFont(QFont(\'Arial\', 10))\n+\n+    def showTime(self):\n+        now = datetime.now()\n+\n+        dt_string = now.strftime("%d/%m/%Y")\n+        t_string = now.strftime("%H:%M:%S")\n+\n+        self.lbDate.setText(dt_string + "\\n " + t_string)\n+\n+    def showdialog(self, msg):\n+        QMessageBox.about(self, "Title", msg)\n+class Teacher(QDialog):\n+    def __init__(self):\n+        super(Teacher, self).__init__()\n+        loadUi("./qt designer/thongtingiangvien.ui", self)\n+        self.btnSave.clicked.connect(self.save)\n+        self.btnRefresh.clicked.connect(self.refresh)\n+        self.btnEdit.clicked.connect(self.edit)\n+        self.btnLoadAll.clicked.connect(self.loadData)\n+        self.btnSearch.clicked.connect(self.search)\n+        self.btnDelete.clicked.connect(self.delete)\n+        self.btnExit.clicked.connect(self.exit)\n+        self.tfPassword.setEchoMode(QtWidgets.QLineEdit.Password)\n+        self.loadData()\n+        self.UiComponents()\n+\n+    def UiComponents(self):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT id FROM teachers order by id")\n+\n+            sqliteConnection.commit()\n+            rows = cursor.fetchall()\n+\n+            for row in rows:\n+                self.cbId.addItem(str(row[0]))\n+            cursor.close()\n+            self.cbId.activated.connect(self.getInfor)\n+        except sqlite3.Error as error:\n+            print("Failed to select data into sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+\n+    def getInfor(self):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("select * from teachers as t inner join account as a on t.id = a.teacher_id where t.id = ?",\n+                           (self.cbId.currentText(),))\n+\n+\n+            sqliteConnection.commit()\n+            results = cursor.fetchone()\n+            print(results)\n+            decrypt = base64.b85decode(results[12]).decode("utf-8")\n+            cursor.close()\n+\n+            self.tfTen.setText(results[1])\n+            self.tfSDT.setText(results[2])\n+            self.tfDiaChi.setText(results[3])\n+            self.tfEmail.setText(results[4])\n+            self.cbLoai.setCurrentText(str(results[5]))\n+            self.tfUsername.setText(results[7])\n+            self.tfPassword.setText(decrypt)\n+            self.cbRole.setCurrentText(str(results[9]))\n+        except sqlite3.Error as error:\n+            print("Failed to get data into sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+\n+    def exit(self):\n+        # detection()\n+        main = Main()\n+        widget.addWidget(main)\n+        widget.setCurrentIndex(widget.currentIndex() + 1)\n+\n+    def loadData(self):\n+        connection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+        cur = connection.cursor()\n+        sqlquery = "select * from teachers"\n+\n+        self.tableWidget.setRowCount(20)\n+        tablerow = 0\n+        for row in cur.execute(sqlquery):\n+            self.tableWidget.setItem(tablerow, 0, QtWidgets.QTableWidgetItem(str(row[0])))\n+            self.tableWidget.setItem(tablerow, 1, QtWidgets.QTableWidgetItem(row[1]))\n+            self.tableWidget.setItem(tablerow, 2, QtWidgets.QTableWidgetItem(row[2]))\n+            self.tableWidget.setItem(tablerow, 3, QtWidgets.QTableWidgetItem(row[3]))\n+            self.tableWidget.setItem(tablerow, 4, QtWidgets.QTableWidgetItem(row[4]))\n+            self.tableWidget.setItem(tablerow, 5, QtWidgets.QTableWidgetItem(row[5]))\n+            tablerow += 1\n+        connection.close()\n+\n+    def refresh(self):\n+        self.tfTen.setText("")\n+        self.tfSDT.setText("")\n+        self.tfEmail.setText("")\n+        self.tfDiaChi.setText("")\n+        self.cbLoai.setCurrentText("")\n+        self.cbId.clear()\n+        self.tfUsername.setText("")\n+        self.tfPassword.setText("")\n+        self.cbRole.setCurrentText("")\n+        self.UiComponents()\n+\n+    def showdialog(self, msg):\n+        QMessageBox.about(self, "Title", msg)\n+\n+    def save(self):\n+        ten = self.tfTen.text()\n+        sdt = self.tfSDT.text()\n+        email = self.tfEmail.text()\n+        diaChi = self.tfDiaChi.text()\n+        loai = self.cbLoai.currentText()\n+        username = self.tfUsername.text()\n+        password = self.tfPassword.text()\n+        role = self.cbRole.currentText()\n+        if isRequiredFiled(ten) == False or isRequiredFiled(sdt) == False or isRequiredFiled(\n+                email) == False or isRequiredFiled(diaChi) == False or isRequiredFiled(\n+                username) == False or isRequiredFiled(password) == False or isRequiredFiled(role) == False:\n+            self.showdialog("\xc4\x90i\xe1\xbb\x81n \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 c\xc3\xa1c tr\xc6\xb0\xe1\xbb\x9dng.")\n+        elif isValidEmail(email) == False:\n+            self.showdialog("Email kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif isValidPhone(sdt) == False:\n+            self.showdialog("S\xe1\xbb\x91 \xc4\x91i\xe1\xbb\x87n tho\xe1\xba\xa1i kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif isValidUsername(username) == False:\n+            self.showdialog("T\xc3\xaan t\xc3\xa0i kho\xe1\xba\xa3n kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif self.checkIfUsernameExist(username) == True:\n+            self.showdialog("T\xc3\xaan t\xc3\xa0i kho\xe1\xba\xa3n \xc4\x91\xc3\xa3 t\xe1\xbb\x93n t\xe1\xba\xa1i.")\n+        elif isValidPassword(password) == False:\n+            self.showdialog("M\xe1\xba\xadt kh\xe1\xba\xa9u kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        else:\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("INSERT INTO teachers (ten, sdt, diaChi, email, loai) values(?, ?, ?, ?, ?)",\n+                               (ten, sdt, diaChi, email, loai))\n+\n+                sqliteConnection.commit()\n+                cursor.close()\n+            except sqlite3.Error as error:\n+                print("Failed to insert data into sqlite table", error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+            # save account\n+            try:\n+                id = self.getTeacherId(ten)\n+                encrypt = base64.b85encode(password.encode("utf-8"))\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("INSERT INTO account (username, password, role, teacher_id) values(?, ?, ?, ?)",\n+                               (username, encrypt, role, id))\n+\n+                sqliteConnection.commit()\n+                self.showdialog("Th\xc3\xaam th\xc3\xa0nh c\xc3\xb4ng")\n+                self.loadData()\n+                self.refresh()\n+                cursor.close()\n+            except sqlite3.Error as error:\n+                print("Failed to insert data into sqlite table", error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+\n+    def edit(self):\n+        id = self.cbId.currentText()\n+        ten = self.tfTen.text()\n+        sdt = self.tfSDT.text()\n+        email = self.tfEmail.text()\n+        diaChi = self.tfDiaChi.text()\n+        loai = self.cbLoai.currentText()\n+        username = self.tfUsername.text()\n+        password = self.tfPassword.text()\n+        role = self.cbRole.currentText()\n+        if (isRequiredFiled(id) == False):\n+            self.showdialog("Ch\xe1\xbb\x8dn gi\xe1\xba\xa3ng vi\xc3\xaan c\xe1\xba\xa7n s\xe1\xbb\xada.")\n+        if isRequiredFiled(ten) == False or isRequiredFiled(sdt) == False or isRequiredFiled(\n+                email) == False or isRequiredFiled(diaChi) == False or isRequiredFiled(\n+                username) == False or isRequiredFiled(password) == False or isRequiredFiled(role) == False:\n+            self.showdialog("\xc4\x90i\xe1\xbb\x81n \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 c\xc3\xa1c tr\xc6\xb0\xe1\xbb\x9dng.")\n+        elif isValidEmail(email) == False:\n+            self.showdialog("Email kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif isValidPhone(sdt) == False:\n+            self.showdialog("S\xe1\xbb\x91 \xc4\x91i\xe1\xbb\x87n tho\xe1\xba\xa1i kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif isValidUsername(username) == False:\n+            self.showdialog("T\xc3\xaan t\xc3\xa0i kho\xe1\xba\xa3n kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif self.checkIfUsernameExist(username):\n+            self.showdialog("T\xc3\xaan t\xc3\xa0i kho\xe1\xba\xa3n \xc4\x91\xc3\xa3 t\xe1\xbb\x93n t\xe1\xba\xa1i.")\n+        elif isValidPassword(password) == False:\n+            self.showdialog("M\xe1\xba\xadt kh\xe1\xba\xa9u kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        else:\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("UPDATE teachers SET ten = ?, sdt = ?, diaChi = ?, email = ?, loai = ? WHERE id = ?",\n+                               (ten, sdt, diaChi, email, loai, id))\n+\n+                sqliteConnection.commit()\n+                cursor.close()\n+            except sqlite3.Error as error:\n+                print("Failed to update data into sqlite table", error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+            # edit account\n+            try:\n+                \n+                encrypt = base64.b85encode(password.encode("utf-8"))\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("UPDATE account SET username = ?, password = ?, role = ? WHERE teacher_id = ?",\n+                               (username, encrypt, role, id))\n+\n+                sqliteConnection.commit()\n+                self.showdialog("S\xe1\xbb\xada th\xc3\xa0nh c\xc3\xb4ng")\n+                self.loadData()\n+                self.refresh()\n+                cursor.close()\n+            except sqlite3.Error as error:\n+                print("Failed to update data into sqlite table", error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+\n+    def search(self):\n+        criteria = self.cbSearch.currentText()\n+        if isRequiredFiled(criteria) == False:\n+            self.showdialog("Ch\xe1\xbb\x8dn c\xe1\xbb\x99t c\xe1\xba\xa7n t\xc3\xacm.")\n+        else:\n+            if criteria == "ID gi\xc3\xa1o vi\xc3\xaan":\n+                self.tableWidget.setRowCount(0)\n+                id = self.tfSearch.text()\n+                if isRequiredFiled(id) == False:\n+                    self.showdialog("Nh\xe1\xba\xadp ID gi\xc3\xa1o vi\xc3\xaan.")\n+                elif isValidInteger(id) == False:\n+                    self.showdialog("ID gi\xc3\xa1o vi\xc3\xaan kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+                else:\n+                    try:\n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+\n+                        query = "SELECT * FROM teachers WHERE id =" + id\n+                        self.tableWidget.setRowCount(20)\n+                        tablerow = 0\n+                        for row in cursor.execute(query):\n+                            self.tableWidget.setItem(tablerow, 0, QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget.setItem(tablerow, 1, QtWidgets.QTableWidgetItem(row[1]))\n+                            self.tableWidget.setItem(tablerow, 2, QtWidgets.QTableWidgetItem(row[2]))\n+                            self.tableWidget.setItem(tablerow, 3, QtWidgets.QTableWidgetItem(row[3]))\n+                            self.tableWidget.setItem(tablerow, 4, QtWidgets.QTableWidgetItem(row[4]))\n+                            self.tableWidget.setItem(tablerow, 5, QtWidgets.QTableWidgetItem(row[5]))\n+                            tablerow += 1\n+                        sqliteConnection.commit()\n+\n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table", error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+            elif criteria == "T\xc3\xaan gi\xc3\xa1o vi\xc3\xaan":\n+                self.tableWidget.setRowCount(0)\n+                name = self.tfSearch.text()\n+                if isRequiredFiled(name) == False:\n+                    self.showdialog("Nh\xe1\xba\xadp t\xc3\xaan gi\xc3\xa1o vi\xc3\xaan.")\n+                elif isValidString(name) == False:\n+                    self.showdialog("T\xc3\xaan gi\xc3\xa1o vi\xc3\xaan kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+                else:\n+                    try:\n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+\n+                        query = "SELECT * FROM teachers WHERE ten = \'" + name + "\'"\n+                        self.tableWidget.setRowCount(20)\n+                        tablerow = 0\n+                        for row in cursor.execute(query):\n+                            self.tableWidget.setItem(tablerow, 0, QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget.setItem(tablerow, 1, QtWidgets.QTableWidgetItem(row[1]))\n+                            self.tableWidget.setItem(tablerow, 2, QtWidgets.QTableWidgetItem(row[2]))\n+                            self.tableWidget.setItem(tablerow, 3, QtWidgets.QTableWidgetItem(row[3]))\n+                            self.tableWidget.setItem(tablerow, 4, QtWidgets.QTableWidgetItem(row[4]))\n+                            self.tableWidget.setItem(tablerow, 5, QtWidgets.QTableWidgetItem(row[5]))\n+                            tablerow += 1\n+                        sqliteConnection.commit()\n+\n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table", error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+\n+    def delete(self):\n+        ret = QMessageBox.question(self, \'MessageBox\', "C\xc3\xb3 mu\xe1\xbb\x91n x\xc3\xb3a kh\xc3\xb4ng?",\n+                                   QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.Cancel)\n+\n+        if ret == QMessageBox.Yes:\n+            id = self.cbId.currentText()\n+            if (isRequiredFiled(id) == False):\n+                self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\x8dn gi\xe1\xba\xa3ng vi\xc3\xaan c\xe1\xba\xa7n x\xc3\xb3a.")\n+            else:\n+                # delete account\n+                try:\n+                    sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                    cursor = sqliteConnection.cursor()\n+                    print("Successfully Connected to SQLite")\n+\n+                    cursor.execute("DELETE FROM account WHERE teacher_id = ?", (id,))\n+\n+                    sqliteConnection.commit()\n+                    cursor.close()\n+                except sqlite3.Error as error:\n+                    print("Failed to delete data into sqlite table", error)\n+                finally:\n+                    if sqliteConnection:\n+                        sqliteConnection.close()\n+                    print("The SQLite connection is closed")\n+                # delete teacher\n+                try:\n+                    sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                    cursor = sqliteConnection.cursor()\n+                    print("Successfully Connected to SQLite")\n+\n+                    cursor.execute("DELETE FROM teachers WHERE id = ?", (id,))\n+\n+                    sqliteConnection.commit()\n+                    cursor.close()\n+                    self.showdialog("X\xc3\xb3a th\xc3\xa0nh c\xc3\xb4ng")\n+                    self.tableWidget.setRowCount(0)\n+                    self.loadData()\n+                    self.refresh()\n+                except sqlite3.Error as error:\n+                    print("Failed to delete data into sqlite table", error)\n+                finally:\n+                    if sqliteConnection:\n+                        sqliteConnection.close()\n+                    print("The SQLite connection is closed")\n+\n+    def checkIfUsernameExist(self, username):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("select id from account where username = ?", [username])\n+\n+            sqliteConnection.commit()\n+            results = cursor.fetchone()\n+            cursor.close()\n+            if results is None:\n+                return False\n+            else:\n+                return True\n+        except sqlite3.Error as error:\n+            print("Failed to get data into sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+\n+    def getTeacherId(self, name):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("select id from teachers where ten = ?", (name,))\n+\n+            sqliteConnection.commit()\n+            rows = cursor.fetchone()\n+            cursor.close()\n+            return rows[0]\n+        except sqlite3.Error as error:\n+            print("Failed to get data into sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+\n+class Subject(QDialog):\n+    def __init__(self):\n+        super(Subject, self).__init__()\n+        loadUi("./qt designer/quanlymonhoc.ui", self)\n+        self.tableWidget1.setColumnWidth(0,100)\n+        self.tableWidget1.setColumnWidth(1,270)\n+        self.tableWidget1.setColumnWidth(2,180)\n+        self.tableWidget1.setColumnWidth(3,180)\n+        self.btnSave1.clicked.connect(self.save1)\n+        self.btnRefresh1.clicked.connect(self.refresh1)\n+        self.btnEdit1.clicked.connect(self.edit1)\n+        self.btnLoadAll1.clicked.connect(self.loadData1)\n+        self.btnSearch1.clicked.connect(self.search1)\n+        self.btnDelete1.clicked.connect(self.delete1)\n+        self.btnExit.clicked.connect(self.exit)\n+        self.loadData1()\n+        self.UiComponents()\n+    def UiComponents(self):\n+        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+        cursor = sqliteConnection.cursor()\n+        print("Successfully Connected to SQLite")\n+\n+        cursor.execute("SELECT id FROM subjects order by id")\n+        \n+        sqliteConnection.commit()\n+        rows = cursor.fetchall()\n+\n+        for row in rows:\n+            self.cbId1.addItem(str(row[0]))\n+        cursor.close()\n+        self.cbId1.activated.connect(self.getInfor1)\n+    def getInfor1(self):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT * FROM subjects WHERE id = ?", (self.cbId1.currentText(),)) \n+        \n+            sqliteConnection.commit()\n+            results = cursor.fetchone();\n+            cursor.close()\n+\n+            self.tfTenMon.setText(results[1])\n+            self.tfSoBuoi.setText(str(results[2]))\n+            self.cbKi.setCurrentText(str(results[3]))\n+        except sqlite3.Error as error:\n+           print("Failed to get data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def loadData1(self):\n+        try:          \n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            query = "SELECT * FROM subjects"\n+            self.tableWidget1.setRowCount(20)\n+            tablerow=0\n+            for row in cursor.execute(query):\n+                self.tableWidget1.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+                self.tableWidget1.setItem(tablerow,1,QtWidgets.QTableWidgetItem(row[1]))\n+                self.tableWidget1.setItem(tablerow,2,QtWidgets.QTableWidgetItem(str(row[2])))\n+                self.tableWidget1.setItem(tablerow,3,QtWidgets.QTableWidgetItem(str(row[3])))\n+                tablerow+=1\n+            sqliteConnection.commit()\n+        \n+            cursor.close()\n+\n+        except sqlite3.Error as error:\n+            print("Failed to select data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def save1(self):\n+        tenMon = self.tfTenMon.text()\n+        soBuoi = self.tfSoBuoi.text()\n+        ki = self.cbKi.currentText()\n+        if isRequiredFiled(tenMon) == False or isRequiredFiled(soBuoi) == False:\n+            self.showdialog("Nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin.")\n+        elif isValidString(tenMon) == False:\n+            self.showdialog("T\xc3\xaan m\xc3\xb4n h\xe1\xbb\x8dc kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif isValidInteger(soBuoi) == False:\n+            self.showdialog("S\xe1\xbb\x91 bu\xe1\xbb\x95i kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        else:\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("INSERT INTO subjects(ten, soBuoi, semester_id) VALUES(?,?,?)", (tenMon, soBuoi, int(ki)))   \n+            \n+                sqliteConnection.commit()\n+                cursor.close()\n+                self.showdialog("Th\xc3\xaam m\xc3\xb4n h\xe1\xbb\x8dc th\xc3\xa0nh c\xc3\xb4ng.")\n+                self.loadData1()\n+                self.refresh1()\n+            except sqlite3.Error as error:\n+                print("Failed to insert data into sqlite table" , error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+    def refresh1(self):\n+        self.tfTenMon.setText("")\n+        self.tfSoBuoi.setText("")\n+        self.cbKi.setCurrentText("1")\n+        self.cbId1.clear()\n+        self.UiComponents()\n+    def edit1(self):\n+        id = self.cbId1.currentText()\n+        tenMon = self.tfTenMon.text()\n+        soBuoi = self.tfSoBuoi.text()\n+        ky = self.cbKi.currentText()\n+        if isRequiredFiled(id):\n+            self.showdialog("Ch\xe1\xbb\x8dn m\xc3\xb4n h\xe1\xbb\x8dc c\xe1\xba\xa7n s\xe1\xbb\xada.")\n+        elif isRequiredFiled(tenMon) == False or isRequiredFiled(soBuoi) == False:\n+            self.showdialog("Nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin.")\n+        elif isValidString(tenMon) == False:\n+            self.showdialog("T\xc3\xaan m\xc3\xb4n h\xe1\xbb\x8dc kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        elif isValidInteger(soBuoi) == False:\n+            self.showdialog("S\xe1\xbb\x91 bu\xe1\xbb\x95i kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+        else:\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("UPDATE subjects SET ten = ?, soBuoi = ?, semester_id = ? WHERE id = ?", (tenMon, soBuoi, int(ky), id))   \n+            \n+                sqliteConnection.commit()\n+                cursor.close()\n+                self.showdialog("S\xe1\xbb\xada m\xc3\xb4n h\xe1\xbb\x8dc th\xc3\xa0nh c\xc3\xb4ng.")\n+                self.loadData1()\n+                self.refresh1()\n+            except sqlite3.Error as error:\n+                print("Failed to update data into sqlite table" , error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+    def delete1(self):\n+        ret = QMessageBox.question(self, \'MessageBox\', "C\xc3\xb3 mu\xe1\xbb\x91n x\xc3\xb3a kh\xc3\xb4ng?", QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.Cancel)\n+\n+        if ret == QMessageBox.Yes:\n+            id = self.cbId1.currentText()\n+            if isRequiredFiled(id) == False:\n+                self.showdialog("Ch\xe1\xbb\x8dn m\xc3\xb4n h\xe1\xbb\x8dc c\xe1\xba\xa7n x\xc3\xb3a.")\n+            else:\n+                try:\n+                    sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                    cursor = sqliteConnection.cursor()\n+                    print("Successfully Connected to SQLite")\n+\n+                    cursor.execute("DELETE FROM subjects WHERE id = ?", (id,))\n+                \n+                    sqliteConnection.commit()\n+                    cursor.close()\n+                    self.showdialog("X\xc3\xb3a m\xc3\xb4n h\xe1\xbb\x8dc th\xc3\xa0nh c\xc3\xb4ng.")\n+                    self.tableWidget1.setRowCount(0)\n+                    self.loadData1()\n+                    self.refresh1()\n+                except sqlite3.Error as error:\n+                    print("Failed to delete data into sqlite table" , error)\n+                finally:\n+                    if sqliteConnection:\n+                        sqliteConnection.close()\n+                    print("The SQLite connection is closed")\n+    def search1(self):\n+        criteria = self.cbSearch1.currentText()\n+        if isRequiredFiled(criteria) == False:\n+            self.showdialog("Ch\xe1\xbb\x8dn ti\xc3\xaau ch\xc3\xad t\xc3\xacm ki\xe1\xba\xbfm.")\n+        else:\n+            if criteria == "ID m\xc3\xb4n h\xe1\xbb\x8dc":\n+                self.tableWidget1.setRowCount(0)\n+                id = self.tfSearch1.text()\n+                if isRequiredFiled(id) == False:\n+                    self.showdialog("Nh\xe1\xba\xadp ID m\xc3\xb4n h\xe1\xbb\x8dc.")\n+                elif isValidInteger(id) == False:\n+                    self.showdialog("ID m\xc3\xb4n h\xe1\xbb\x8dc kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+                else:\n+                    try:          \n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+\n+                        query = "SELECT * FROM subjects WHERE id =" + id\n+                        self.tableWidget1.setRowCount(20)\n+                        tablerow=0\n+                        for row in cursor.execute(query):\n+                            self.tableWidget1.setColumnWidth(0,100)\n+                            self.tableWidget1.setColumnWidth(1,270)\n+                            self.tableWidget1.setColumnWidth(2,180)\n+                            self.tableWidget1.setColumnWidth(3,180)\n+                            self.tableWidget1.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget1.setItem(tablerow,1,QtWidgets.QTableWidgetItem(row[1]))\n+                            self.tableWidget1.setItem(tablerow,2,QtWidgets.QTableWidgetItem(str(row[2])))\n+                            self.tableWidget1.setItem(tablerow,3,QtWidgets.QTableWidgetItem(str(row[3])))\n+                            tablerow+=1\n+                        sqliteConnection.commit()\n+                    \n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table" , error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+            elif criteria == "T\xc3\xaan m\xc3\xb4n h\xe1\xbb\x8dc":\n+                self.tableWidget1.setRowCount(0)\n+                name = self.tfSearch1.text()\n+                if isRequiredFiled(name) == False:\n+                    self.showdialog("Nh\xe1\xba\xadp t\xc3\xaan m\xc3\xb4n h\xe1\xbb\x8dc.")\n+                elif isValidString(name) == False:\n+                    self.showdialog("T\xc3\xaan m\xc3\xb4n h\xe1\xbb\x8dc kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+                else:\n+                    try:          \n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+\n+                        query = "SELECT * FROM subjects WHERE ten = \'" + name + "\'"\n+                        print(query)\n+                        self.tableWidget1.setRowCount(20)\n+                        tablerow=0\n+                        for row in cursor.execute(query):\n+                            print(row)\n+                            self.tableWidget1.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget1.setItem(tablerow,1,QtWidgets.QTableWidgetItem(row[1]))\n+                            self.tableWidget1.setItem(tablerow,2,QtWidgets.QTableWidgetItem(str(row[2])))\n+                            self.tableWidget1.setItem(tablerow,3,QtWidgets.QTableWidgetItem(str(row[3])))\n+                            tablerow+=1\n+                        sqliteConnection.commit()\n+                    \n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table" , error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+            elif criteria == "K\xc3\xac":\n+                self.tableWidget1.setRowCount(0)\n+                ki = self.tfSearch1.text()\n+                if isRequiredFiled(ki) == False:\n+                    self.showdialog("Ch\xe1\xbb\x8dn k\xc3\xac.")\n+                elif isValidInteger(ki) == False:\n+                    self.showdialog("K\xc3\xac kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87.")\n+                else:\n+                    try:          \n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+\n+                        query = "SELECT * FROM subjects WHERE semester_id =" + ki \n+                        self.tableWidget1.setRowCount(20)\n+                        tablerow=0\n+                        for row in cursor.execute(query):\n+                            self.tableWidget1.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget1.setItem(tablerow,1,QtWidgets.QTableWidgetItem(row[1]))\n+                            self.tableWidget1.setItem(tablerow,2,QtWidgets.QTableWidgetItem(str(row[2])))\n+                            self.tableWidget1.setItem(tablerow,3,QtWidgets.QTableWidgetItem(str(row[3])))\n+                            tablerow+=1\n+                        sqliteConnection.commit()\n+                    \n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table" , error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+    def exit(self):\n+        main = Main()\n+        widget.addWidget(main)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+    def showdialog(self, msg):\n+        QMessageBox.about(self, "Title", msg)\n+class LopHoc(QDialog):\n+    def __init__(self):\n+        super(LopHoc, self).__init__()\n+        loadUi("./qt designer/quanlylophoc.ui",self)\n+        self.tableWidget.setColumnWidth(0,250)\n+        self.tableWidget.setColumnWidth(1,250)\n+        self.tableWidget.setColumnWidth(2,250)\n+        self.tableWidget2.setColumnWidth(0,100)\n+        self.tableWidget2.setColumnWidth(1,100)\n+        self.tableWidget2.setColumnWidth(2,250)\n+        self.tableWidget2.setColumnWidth(3,250)\n+        self.btnRefresh1.clicked.connect(self.refresh1)\n+        self.btnAdd1.clicked.connect(self.add1)\n+        self.btnUpdate1.clicked.connect(self.update1)\n+        self.btnLoadAll1.clicked.connect(self.loadData1)\n+        self.btnDel1.clicked.connect(self.delete1)\n+        self.btnRefresh2.clicked.connect(self.refresh2)\n+        self.btnAdd2.clicked.connect(self.add2)\n+        self.btnUpdate2.clicked.connect(self.update2)\n+        self.btnLoadAll2.clicked.connect(self.loadData2)\n+        self.btnDel2.clicked.connect(self.delete2)\n+        self.btnSearch1.clicked.connect(self.search1)\n+        self.btnSearch2.clicked.connect(self.search2)\n+        self.btnExit.clicked.connect(self.Exit)\n+        self.loadData1()\n+        self.loadData2()\n+        self.UiComponents()\n+    def Exit(self):\n+        main = Main()\n+        widget.addWidget(main)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+    def UiComponents(self):\n+        # lay id class\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT id FROM class order by id")\n+            \n+            sqliteConnection.commit()\n+            rows = cursor.fetchall()\n+\n+            for row in rows:\n+                self.cbIdLopHoc.addItem(str(row[0]))\n+                self.cbIdLopHoc2.addItem(str(row[0]))\n+            cursor.close()\n+            self.cbIdLopHoc.activated.connect(self.getInfor)\n+        except sqlite3.Error as error:\n+            print("Failed to select data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+        # lay id sinh vien\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT id FROM students order by id")\n+            \n+            sqliteConnection.commit()\n+            rows = cursor.fetchall()\n+\n+            for row in rows:\n+                self.cbIdSv.addItem(str(row[0]))\n+            cursor.close()\n+            self.cbIdSv.activated.connect(self.getInfor2)\n+        except sqlite3.Error as error:\n+            print("Failed to select data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def getInfor(self):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT * FROM class WHERE id = ?", (self.cbIdLopHoc.currentText(),)) \n+        \n+            sqliteConnection.commit()\n+            results = cursor.fetchone()\n+            cursor.close()\n+\n+            self.tfTenLop.setText(results[1])\n+            self.tfDiaDiem.setText(results[2])\n+        except sqlite3.Error as error:\n+           print("Failed to get data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def getInfor2(self):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT ten FROM students WHERE id = ?", (self.cbIdSv.currentText(),)) \n+        \n+            sqliteConnection.commit()\n+            results = cursor.fetchone()\n+            cursor.close()\n+\n+            self.tfTenSV.setText(results[0])\n+        except sqlite3.Error as error:\n+           print("Failed to get data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def loadData1(self):\n+        connection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+        cur = connection.cursor()\n+        sqlquery="select * from class"\n+\n+        self.tableWidget.setRowCount(10)\n+        tablerow=0\n+        for row in cur.execute(sqlquery):\n+            self.tableWidget.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+            self.tableWidget.setItem(tablerow,1,QtWidgets.QTableWidgetItem(row[1]))\n+            self.tableWidget.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[2]))\n+            tablerow+=1\n+        connection.close()\n+    def loadData2(self):\n+        connection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+        cur = connection.cursor()\n+        sqlquery="select * from classMember"\n+\n+        self.tableWidget2.setRowCount(10)\n+        tablerow=0\n+        for row in cur.execute(sqlquery):\n+            self.tableWidget2.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[1])))\n+            self.tableWidget2.setItem(tablerow,1,QtWidgets.QTableWidgetItem(str(row[2])))\n+            self.tableWidget2.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[3]))\n+            self.tableWidget2.setItem(tablerow,3,QtWidgets.QTableWidgetItem(row[4]))\n+            tablerow+=1\n+        connection.close()\n+    def showdialog(self, msg):\n+        QMessageBox.about(self, "Title", msg)\n+    def add1(self):\n+        tenLop = self.tfTenLop.text()\n+        diaDiem = self.tfDiaDiem.text()\n+        if isRequiredFiled(tenLop) == False or isRequiredFiled(diaDiem) == False:\n+            self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin.")\n+        else:\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("INSERT INTO class (ten, diaDiem) values(?, ?)", (tenLop, diaDiem))\n+            \n+                sqliteConnection.commit()\n+                cursor.close()\n+                self.showdialog("Th\xc3\xaam th\xc3\xa0nh c\xc3\xb4ng")\n+                self.loadData1()\n+                self.refresh1()\n+            except sqlite3.Error as error:\n+                print("Failed to insert data into sqlite table" , error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+    def refresh1(self):\n+        self.tfTenLop.setText("")\n+        self.tfDiaDiem.setText("")\n+        self.cbIdLopHoc.clear()\n+        self.UiComponents()\n+    def update1(self):\n+        id = self.cbIdLopHoc.currentText()\n+        tenLop = self.tfTenLop.text()\n+        diaDiem = self.tfDiaDiem.text()\n+        if isRequiredFiled(id) == False:\n+            self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\x8dn l\xe1\xbb\x9bp h\xe1\xbb\x8dc c\xe1\xba\xa7n s\xe1\xbb\xada.")\n+        elif isRequiredFiled(tenLop) == False or isRequiredFiled(diaDiem) == False:\n+            self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin.")\n+        else:\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("UPDATE class SET ten = ?, diaDiem = ? WHERE id = ?", (tenLop,diaDiem , id))\n+            \n+                sqliteConnection.commit()\n+                cursor.close()\n+                self.showdialog("S\xe1\xbb\xada th\xc3\xa0nh c\xc3\xb4ng")\n+                self.loadData1()\n+                self.refresh1()\n+            except sqlite3.Error as error:\n+                print("Failed to update data into sqlite table" , error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")   \n+    def delete1(self):\n+        ret = QMessageBox.question(self, \'MessageBox\', "C\xc3\xb3 mu\xe1\xbb\x91n x\xc3\xb3a kh\xc3\xb4ng?", QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.Cancel)\n+\n+        if ret == QMessageBox.Yes:\n+            id = self.cbIdLopHoc.currentText()\n+            if isRequiredFiled(id) == False:\n+                self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\x8dn l\xe1\xbb\x9bp h\xe1\xbb\x8dc c\xe1\xba\xa7n x\xc3\xb3a.")\n+            else:\n+                try:\n+                    sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                    cursor = sqliteConnection.cursor()\n+                    print("Successfully Connected to SQLite")\n+\n+                    cursor.execute("DELETE FROM class WHERE id = ?", (id,))\n+                \n+                    sqliteConnection.commit()\n+                    cursor.close()\n+                    self.showdialog("X\xc3\xb3a th\xc3\xa0nh c\xc3\xb4ng")\n+                    self.tableWidget.setRowCount(0)\n+                    self.loadData1()\n+                    self.refresh1()\n+                except sqlite3.Error as error:\n+                    print("Failed to delete data into sqlite table" , error)\n+                finally:\n+                    if sqliteConnection:\n+                        sqliteConnection.close()\n+                    print("The SQLite connection is closed")\n+    def search1(self):\n+        criteria = self.cbSearch1.currentText()\n+        if isRequiredFiled(criteria) == False:\n+            self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\x8dn ti\xc3\xaau ch\xc3\xad c\xe1\xba\xa7n t\xc3\xacm.")\n+        else:\n+            if criteria == "ID l\xe1\xbb\x9bp h\xe1\xbb\x8dc":\n+                id = self.tfSearch1.text()\n+                if isRequiredFiled(id) == False:\n+                    self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp ID l\xe1\xbb\x9bp h\xe1\xbb\x8dc c\xe1\xba\xa7n t\xc3\xacm.")\n+                elif isValidInteger(id) == False:\n+                    self.showdialog("ID l\xe1\xbb\x9bp h\xe1\xbb\x8dc ph\xe1\xba\xa3i l\xc3\xa0 s\xe1\xbb\x91 nguy\xc3\xaan.")\n+                else:\n+                    self.tableWidget.setRowCount(0)\n+                    try:          \n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+\n+                        query = "SELECT * FROM class WHERE id =" + id\n+                        self.tableWidget.setRowCount(10)\n+                        tablerow=0\n+                        for row in cursor.execute(query):\n+                            self.tableWidget.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget.setItem(tablerow,1,QtWidgets.QTableWidgetItem(row[1]))\n+                            self.tableWidget.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[2]))\n+                            tablerow+=1\n+                        sqliteConnection.commit()\n+                    \n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table" , error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+            elif criteria == "T\xc3\xaan l\xe1\xbb\x9bp":\n+                name = self.tfSearch1.text()\n+                if isRequiredFiled(name) == False:\n+                    self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp t\xc3\xaan l\xe1\xbb\x9bp h\xe1\xbb\x8dc c\xe1\xba\xa7n t\xc3\xacm.")\n+                elif isValidString(name) == False:\n+                    self.showdialog("T\xc3\xaan l\xe1\xbb\x9bp h\xe1\xbb\x8dc ph\xe1\xba\xa3i l\xc3\xa0 chu\xe1\xbb\x97i.")\n+                else:\n+                    try:          \n+                        self.tableWidget.setRowCount(0)\n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+\n+                        query = "SELECT * FROM class WHERE ten LIKE \'%"+ name + "%\'"\n+                        self.tableWidget.setRowCount(10)\n+                        tablerow=0\n+                        for row in cursor.execute(query):\n+                            self.tableWidget.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget.setItem(tablerow,1,QtWidgets.QTableWidgetItem(row[1]))\n+                            self.tableWidget.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[2]))\n+                            tablerow+=1\n+                        sqliteConnection.commit()\n+                    \n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table" , error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+\n+    def add2(self):\n+        idSV = self.cbIdSv.currentText()\n+        idLopHoc = self.cbIdLopHoc2.currentText()\n+        ngayVao = self.dateIn.text()\n+        ngayRa = self.dateOut.text()\n+        if isRequiredFiled(idSV) == False:\n+            self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\x8dn sinh vi\xc3\xaan c\xe1\xba\xa7n th\xc3\xaam.")\n+        elif isRequiredFiled(idLopHoc) == False:\n+            self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\x8dn l\xe1\xbb\x9bp h\xe1\xbb\x8dc c\xe1\xba\xa7n th\xc3\xaam.")\n+        else:\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("INSERT INTO classMember (student_id,class_id, ngayRa, ngayVao) values(?,?, ?, ?)", (idSV,idLopHoc,ngayRa,ngayVao))\n+            \n+                sqliteConnection.commit()\n+                cursor.close()\n+                self.showdialog("Th\xc3\xaam th\xc3\xa0nh c\xc3\xb4ng")\n+                self.loadData2()\n+                self.refresh2()\n+            except sqlite3.Error as error:\n+                print("Failed to insert data into sqlite table" , error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+    def update2(self):\n+        idSV = self.cbIdSv.currentText()\n+        idLopHoc = self.cbIdLopHoc2.currentText()\n+        ngayVao = self.dateIn.text()\n+        ngayRa =self.dateOut.text()\n+        if isRequiredFiled(idSV) == False:\n+            self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\x8dn sinh vi\xc3\xaan c\xe1\xba\xa7n s\xe1\xbb\xada.")\n+        elif isRequiredFiled(idLopHoc) == False:\n+            self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\x8dn l\xe1\xbb\x9bp h\xe1\xbb\x8dc c\xe1\xba\xa7n s\xe1\xbb\xada.")\n+        else:\n+            # lay id bang classMember\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("SELECT id FROM classMember WHERE student_id=? AND class_id=?",(idSV,idLopHoc))\n+                id=cursor.fetchone()\n+                sqliteConnection.commit()\n+                cursor.close()\n+            except sqlite3.Error as error:\n+                print("Failed to update data into sqlite table" , error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+            # sua ban ghi\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("UPDATE classMember set student_id = ?, class_id = ?, ngayRa = ?, ngayVao = ? where id = ?",(idSV,idLopHoc,ngayRa, ngayVao,id[0]))\n+                sqliteConnection.commit()\n+                cursor.close()\n+                self.showdialog("S\xe1\xbb\xada th\xc3\xa0nh c\xc3\xb4ng")\n+                self.loadData2()\n+                self.refresh2()\n+            except sqlite3.Error as error:\n+                print("Failed to update data into sqlite table" , error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+    def delete2(self):\n+        ret = QMessageBox.question(self, \'MessageBox\', "C\xc3\xb3 mu\xe1\xbb\x91n x\xc3\xb3a kh\xc3\xb4ng?", QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.Cancel)\n+\n+        if ret == QMessageBox.Yes:\n+            idSV = self.cbIdSv.currentText()\n+            idLopHoc = self.cbIdLopHoc2.currentText()\n+            if isRequiredFiled(idSV) == False:\n+                self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\x8dn sinh vi\xc3\xaan c\xe1\xba\xa7n x\xc3\xb3a.")\n+            elif isRequiredFiled(idLopHoc) == False:\n+                self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\x8dn l\xe1\xbb\x9bp h\xe1\xbb\x8dc c\xe1\xba\xa7n x\xc3\xb3a.")\n+            else:\n+                try:\n+                    sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                    cursor = sqliteConnection.cursor()\n+                    print("Successfully Connected to SQLite")\n+\n+                    cursor.execute("DELETE FROM classMember WHERE  student_id=? AND class_id=?", (idSV,idLopHoc))\n+                \n+                    sqliteConnection.commit()\n+                    cursor.close()\n+                    self.showdialog("X\xc3\xb3a th\xc3\xa0nh c\xc3\xb4ng")\n+                    self.tableWidget.setRowCount(0)\n+                    self.loadData2()\n+                    self.refresh2()\n+                except sqlite3.Error as error:\n+                    print("Failed to delete data into sqlite table" , error)\n+                finally:\n+                    if sqliteConnection:\n+                        sqliteConnection.close()\n+                    print("The SQLite connection is closed")\n+    def refresh2(self):\n+        qDate=QDate(2015,1,1)\n+        self.cbIdSv.clear()\n+        self.cbIdLopHoc2.clear()\n+        self.tfTenSV.setText("")\n+        self.dateIn.setDate(qDate)\n+        self.dateOut.setDate(qDate)\n+        self.UiComponents()\n+    def search2(self):\n+        criteria = self.cbSearch2.currentText()\n+        if isRequiredFiled(criteria) == False:\n+            self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\x8dn ti\xc3\xaau ch\xc3\xad t\xc3\xacm ki\xe1\xba\xbfm.")\n+        else:\n+            if criteria == "ID SV":\n+                id = self.tfSearch2.text()\n+                if isRequiredFiled(id) == False:\n+                    self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp ID sinh vi\xc3\xaan.")\n+                elif isValidInteger(id) == False:\n+                    self.showdialog("ID sinh vi\xc3\xaan ph\xe1\xba\xa3i l\xc3\xa0 s\xe1\xbb\x91.")\n+                else:\n+                    self.tableWidget2.setRowCount(0)\n+                    try:          \n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+                \n+                        self.tableWidget2.setRowCount(10)\n+                        tablerow=0\n+                        for row in cursor.execute("SELECT * FROM classMember WHERE student_id =?",(id,)):\n+                            self.tableWidget2.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[1])))\n+                            self.tableWidget2.setItem(tablerow,1,QtWidgets.QTableWidgetItem(str(row[2])))\n+                            self.tableWidget2.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[3]))\n+                            self.tableWidget2.setItem(tablerow,3,QtWidgets.QTableWidgetItem(row[4]))\n+                            tablerow+=1\n+                        sqliteConnection.commit()\n+                    \n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table" , error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+            elif criteria == "ID l\xe1\xbb\x9bp h\xe1\xbb\x8dc":\n+                idLopHoc = self.tfSearch2.text()\n+                if isRequiredFiled(idLopHoc) == False:\n+                    self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp ID l\xe1\xbb\x9bp h\xe1\xbb\x8dc.")\n+                elif isValidInteger(idLopHoc) == False:\n+                    self.showdialog("ID l\xe1\xbb\x9bp h\xe1\xbb\x8dc ph\xe1\xba\xa3i l\xc3\xa0 s\xe1\xbb\x91.")\n+                else:\n+                    self.tableWidget2.setRowCount(0)\n+                    try:          \n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+\n+                        query = "SELECT * FROM classMember WHERE class_id =" + idLopHoc\n+                        self.tableWidget2.setRowCount(10)\n+                        tablerow=0\n+                        for row in cursor.execute(query):\n+                            self.tableWidget2.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[1])))\n+                            self.tableWidget2.setItem(tablerow,1,QtWidgets.QTableWidgetItem(str(row[2])))\n+                            self.tableWidget2.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[3]))\n+                            self.tableWidget2.setItem(tablerow,3,QtWidgets.QTableWidgetItem(row[4]))\n+                            tablerow+=1\n+                        sqliteConnection.commit()\n+                    \n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table" , error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+\n+class Schedule(QDialog):\n+\n+    def __init__(self):\n+        super(Schedule, self).__init__()\n+        loadUi("./qt designer/thongtinlichhoc.ui",self)\n+        self.btnAdd.clicked.connect(self.add)\n+        self.btnLoadAll.clicked.connect(self.loadData)\n+        self.btnUpdate.clicked.connect(self.update)\n+        self.btnDelete.clicked.connect(self.delete)\n+        self.btnRefresh.clicked.connect(self.refresh)\n+        self.btnSearch.clicked.connect(self.search)\n+        self.btnExit.clicked.connect(self.exit)\n+        # self.tableWidget.itemDoubleClicked.connect(self.on_click)\n+        self.UiComponents()\n+        self.loadData()\n+    def UiComponents(self):\n+        # lay id giao vien\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT id FROM teachers order by id")\n+        \n+            sqliteConnection.commit()\n+            rows = cursor.fetchall()\n+\n+            for row in rows:\n+                self.cbIdGV.addItem(str(row[0]))\n+            cursor.close()\n+            self.cbIdGV.activated.connect(self.getInforGV)\n+        except sqlite3.Error as error:\n+              print("Failed to select data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+        # lay id lop hoc\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT id FROM class order by id")\n+        \n+            sqliteConnection.commit()\n+            rows = cursor.fetchall()\n+           \n+            for row in rows:\n+                self.cbIdLop.addItem(str(row[0]))\n+            cursor.close()\n+            self.cbIdLop.activated.connect(self.getInforClass)\n+        except sqlite3.Error as error:\n+                print("Failed to select data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+        # lay id mon hoc\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT id FROM subjects order by id")\n+        \n+            sqliteConnection.commit()\n+            rows = cursor.fetchall()\n+       \n+            for row in rows:\n+                self.cbIdMon.addItem(str(row[0]))\n+            cursor.close()\n+            self.cbIdMon.activated.connect(self.getInforSubject)\n+        except sqlite3.Error as error:\n+                print("Failed to select data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def getInforGV(self) :\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT ten FROM teachers WHERE id = ?", (self.cbIdGV.currentText(),)) \n+        \n+            sqliteConnection.commit()\n+            results = cursor.fetchone()\n+            cursor.close()\n+\n+            self.tfGV.setText(results[0])\n+        except sqlite3.Error as error:\n+           print("Failed to get data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def getInforSubject(self):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT ten FROM subjects WHERE id = ?", (self.cbIdMon.currentText(),)) \n+        \n+            sqliteConnection.commit()\n+            results = cursor.fetchone()\n+            cursor.close()\n+\n+            self.tfTenMon.setText(results[0])\n+        except sqlite3.Error as error:\n+           print("Failed to get data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def getInforClass(self):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+\n+            cursor.execute("SELECT ten FROM class WHERE id = ?", (self.cbIdLop.currentText(),)) \n+        \n+            sqliteConnection.commit()\n+            results = cursor.fetchone()\n+            cursor.close()\n+\n+            self.tfTenLop.setText(results[0])\n+        except sqlite3.Error as error:\n+           print("Failed to get data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def loadData(self):\n+        self.tfSearch.clear()\n+        connection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+        cur = connection.cursor()\n+        sqlquery="select s.id, s.teacher_id, t.ten, s.subject_id, sb.ten, s.class_id, c.ten, s.batDau, s.ketThuc from schedule as s inner join teachers as t on s.teacher_id = t.id inner join subjects as sb on s.subject_id = sb.id inner join class as c on s.class_id = c.id "\n+\n+        self.tableWidget.setRowCount(50)\n+        tablerow=0\n+        for row in cur.execute(sqlquery):\n+            self.tableWidget.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+            self.tableWidget.setItem(tablerow,1,QtWidgets.QTableWidgetItem(str(row[1])))\n+            self.tableWidget.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[2]))\n+            self.tableWidget.setItem(tablerow,3,QtWidgets.QTableWidgetItem(str(row[3])))\n+            self.tableWidget.setItem(tablerow,4,QtWidgets.QTableWidgetItem(row[4]))\n+            self.tableWidget.setItem(tablerow,5,QtWidgets.QTableWidgetItem(str(row[5])))\n+            self.tableWidget.setItem(tablerow,6,QtWidgets.QTableWidgetItem(row[6]))\n+            self.tableWidget.setItem(tablerow,7,QtWidgets.QTableWidgetItem(row[7]))\n+            self.tableWidget.setItem(tablerow,8,QtWidgets.QTableWidgetItem(row[8]))\n+            tablerow+=1\n+        connection.close()\n+    def exit(self):\n+        main = Main()\n+        widget.addWidget(main)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+    def add(self):\n+        start = self.deStart.text()\n+        end = self.deEnd.text()\n+        idGV = self.cbIdGV.currentText()\n+        idLopHoc = self.cbIdLop.currentText()\n+        idMon = self.cbIdMon.currentText()\n+        if isRequiredFiled(idGV) == False:\n+            self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin")\n+        elif isRequiredFiled(idLopHoc) == False:\n+            self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin")\n+        elif isRequiredFiled(idMon) == False:\n+            self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin")\n+        else:\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("INSERT INTO schedule (teacher_id, subject_id, class_id, batDau, ketThuc) values(?, ?, ?, ?, ?)", (idGV,idMon,idLopHoc,start,end))\n+            \n+                sqliteConnection.commit()\n+                print("Record inserted successfully into SqliteDb_developers table ", cursor.rowcount)\n+                cursor.close()\n+                self.showdialog("Th\xc3\xaam th\xc3\xa0nh c\xc3\xb4ng")\n+                self.tableWidget.setRowCount(0)\n+                self.loadData()\n+                self.refresh()\n+            except sqlite3.Error as error:\n+                print("Failed to insert data into sqlite table" , error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+    def update(self):\n+        id = self.tfId.text()\n+        idGV = self.cbIdGV.currentText()\n+        idLopHoc = self.cbIdLop.currentText()\n+        idMon = self.cbIdMon.currentText()\n+        start = self.deStart.text()\n+        end = self.deEnd.text()\n+        if isRequiredFiled(id) == False:\n+            self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin")\n+        elif isRequiredFiled(idGV) == False or isRequiredFiled(idLopHoc) == False or isRequiredFiled(idMon) == False:\n+            self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin")\n+        else:\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                cursor.execute("UPDATE schedule set teacher_id = ?, subject_id = ?, class_id = ?, batDau = ?, ketThuc = ? where id = ?", (idGV, idMon, idLopHoc,start ,end , id,))\n+                sqliteConnection.commit()\n+                cursor.close()\n+                self.showdialog("S\xe1\xbb\xada th\xc3\xa0nh c\xc3\xb4ng")\n+                self.loadData()\n+                self.refresh()\n+            except sqlite3.Error as error:\n+                print("Failed to update data into sqlite table" , error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+    def delete(self):\n+        ret = QMessageBox.question(self, \'MessageBox\', "C\xc3\xb3 mu\xe1\xbb\x91n x\xc3\xb3a kh\xc3\xb4ng?", QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.Cancel)\n+\n+        if ret == QMessageBox.Yes:\n+            id = self.tfId.text()\n+            if isRequiredFiled(id) == False:\n+                self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin")\n+            else:\n+                try:\n+                    sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                    cursor = sqliteConnection.cursor()\n+                    print("Successfully Connected to SQLite")\n+\n+                    cursor.execute("DELETE FROM schedule WHERE id = ?", (id,))\n+                \n+                    sqliteConnection.commit()\n+                    cursor.close()\n+                    self.tableWidget.setRowCount(0)\n+                    self.loadData()\n+                    self.refresh()\n+                except sqlite3.Error as error:\n+                    print("Failed to delete data into sqlite table" , error)\n+                finally:\n+                    if sqliteConnection:\n+                        sqliteConnection.close()\n+                    print("The SQLite connection is closed")\n+    def refresh(self):\n+        self.tfId.clear()\n+        self.cbIdGV.clear()\n+        self.cbIdLop.clear()\n+        self.cbIdMon.clear()\n+        self.tfGV.setText("")\n+        self.tfTenMon.setText("")\n+        self.tfTenLop.setText("")\n+        self.UiComponents() \n+    def search(self):\n+        self.tableWidget.setRowCount(0)\n+        criteria = self.cbSearch.currentText()\n+        if isRequiredFiled(criteria) == False:\n+            self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin")\n+        else:\n+            if criteria == "ID gi\xc3\xa1o vi\xc3\xaan":\n+                id = self.tfSearch.text()\n+                if isRequiredFiled(id) == False:\n+                    self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin")\n+                elif isValidInteger(id) == False:\n+                    self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp s\xe1\xbb\x91")\n+                else:\n+                    self.tableWidget.setRowCount(0)\n+                    try:          \n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+                    \n+                        self.tableWidget.setRowCount(50)\n+                        tablerow=0\n+                        for row in cursor.execute("select s.id, s.teacher_id, t.ten, s.subject_id, sb.ten, s.class_id, c.ten, s.batDau, s.ketThuc from schedule as s inner join teachers as t on s.teacher_id = t.id inner join subjects as sb on s.subject_id = sb.id inner join class as c on s.class_id = c.id where s.teacher_id = ?" , (id,)):\n+                            self.tableWidget.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget.setItem(tablerow,1,QtWidgets.QTableWidgetItem(str(row[1])))\n+                            self.tableWidget.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[2]))\n+                            self.tableWidget.setItem(tablerow,3,QtWidgets.QTableWidgetItem(str(row[3])))\n+                            self.tableWidget.setItem(tablerow,4,QtWidgets.QTableWidgetItem(row[4]))\n+                            self.tableWidget.setItem(tablerow,5,QtWidgets.QTableWidgetItem(str(row[5])))\n+                            self.tableWidget.setItem(tablerow,6,QtWidgets.QTableWidgetItem(row[6]))\n+                            self.tableWidget.setItem(tablerow,7,QtWidgets.QTableWidgetItem(row[7]))\n+                            self.tableWidget.setItem(tablerow,8,QtWidgets.QTableWidgetItem(row[8]))\n+                            tablerow+=1\n+                        sqliteConnection.commit()\n+                    \n+                        cursor.close()\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table" , error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+            elif criteria == "ID m\xc3\xb4n":\n+                idMon = self.tfSearch.text()\n+                if isRequiredFiled(idMon) == False:\n+                    self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin")\n+                elif isValidInteger(idMon) == False:\n+                    self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp s\xe1\xbb\x91")\n+                else:\n+                    self.tableWidget.setRowCount(0)\n+                    try:          \n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+\n+                        self.tableWidget.setRowCount(50)\n+                        tablerow=0\n+                        for row in cursor.execute("select s.id, s.teacher_id, t.ten, s.subject_id, sb.ten, s.class_id, c.ten, s.batDau, s.ketThuc from schedule as s inner join teachers as t on s.teacher_id = t.id inner join subjects as sb on s.subject_id = sb.id inner join class as c on s.class_id = c.id where s.subject_id = ?" , (idMon,)):\n+                            self.tableWidget.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget.setItem(tablerow,1,QtWidgets.QTableWidgetItem(str(row[1])))\n+                            self.tableWidget.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[2]))\n+                            self.tableWidget.setItem(tablerow,3,QtWidgets.QTableWidgetItem(str(row[3])))\n+                            self.tableWidget.setItem(tablerow,4,QtWidgets.QTableWidgetItem(row[4]))\n+                            self.tableWidget.setItem(tablerow,5,QtWidgets.QTableWidgetItem(str(row[5])))\n+                            self.tableWidget.setItem(tablerow,6,QtWidgets.QTableWidgetItem(row[6]))\n+                            self.tableWidget.setItem(tablerow,7,QtWidgets.QTableWidgetItem(row[7]))\n+                            self.tableWidget.setItem(tablerow,8,QtWidgets.QTableWidgetItem(row[8]))\n+                            tablerow+=1\n+                        sqliteConnection.commit()\n+                    \n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table" , error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+            elif criteria == "ID l\xe1\xbb\x9bp":\n+                idClass = self.tfSearch.text()\n+                if isRequiredFiled(idClass) == False:\n+                    self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin")\n+                elif isValidInteger(idClass) == False:\n+                    self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp s\xe1\xbb\x91")\n+                else:\n+                    self.tableWidget.setRowCount(0)\n+                    try:          \n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+\n+                        self.tableWidget.setRowCount(50)\n+                        tablerow=0\n+                        for row in cursor.execute("select s.id, s.teacher_id, t.ten, s.subject_id, sb.ten, s.class_id, c.ten, s.batDau, s.ketThuc from schedule as s inner join teachers as t on s.teacher_id = t.id inner join subjects as sb on s.subject_id = sb.id inner join class as c on s.class_id = c.id where s.class_id = ?" , (idClass,)):\n+                            self.tableWidget.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget.setItem(tablerow,1,QtWidgets.QTableWidgetItem(str(row[1])))\n+                            self.tableWidget.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[2]))\n+                            self.tableWidget.setItem(tablerow,3,QtWidgets.QTableWidgetItem(str(row[3])))\n+                            self.tableWidget.setItem(tablerow,4,QtWidgets.QTableWidgetItem(row[4]))\n+                            self.tableWidget.setItem(tablerow,5,QtWidgets.QTableWidgetItem(str(row[5])))\n+                            self.tableWidget.setItem(tablerow,6,QtWidgets.QTableWidgetItem(row[6]))\n+                            self.tableWidget.setItem(tablerow,7,QtWidgets.QTableWidgetItem(row[7]))\n+                            self.tableWidget.setItem(tablerow,8,QtWidgets.QTableWidgetItem(row[8]))\n+                            tablerow+=1\n+                        sqliteConnection.commit()\n+                    \n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table" , error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+    def showdialog(self, msg):\n+        QMessageBox.about(self, "Title", msg)\n+\n+class Recognize(QDialog):\n+    def __init__(self):\n+        super(Recognize, self).__init__()\n+        loadUi("./qt designer/hethongdiemdanhkhuonmat.ui",self)\n+        self.btnExit.clicked.connect(self.exit)\n+        self.btnDetection.clicked.connect(self.detection)\n+        self.UiComponents()\n+    def UiComponents(self):\n+        try:\n+            date = datetime.today().strftime(\'%Y-%m-%d\')\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Connected to SQLite")\n+\n+            sqlite_select_query = "SELECT m.ten from schedule as s inner join subjects as m on s.subject_id = m.id where DATE(batDau) =" + "\'" + date + "\'"\n+            cursor.execute(sqlite_select_query)\n+            rows = cursor.fetchall()\n+            for row in rows:\n+                self.cbMon.addItem(str(row[0]))\n+            self.cbMon.activated.connect(self.getInforSubject)\n+            # self.cbMon.activated.connect(self.getNumberLessonForSubject)\n+            cursor.close()\n+        except sqlite3.Error as error:\n+            print("Failed to select data from sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def getInforSubject(self):\n+        try:\n+            tenMon = self.cbMon.currentText()\n+            date = datetime.today().strftime(\'%Y-%m-%d\')\n+\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Connected to SQLite")\n+\n+            sqlite_select_query = "SELECT s.class_id, m.ten, TIME(s.batDau), TIME(s.ketThuc) from schedule as s inner join subjects as m on s.subject_id = m.id where DATE(batDau) =" + "\'" + date + "\'" + "and m.ten = " + "\'" + tenMon + "\'"\n+            cursor.execute(sqlite_select_query)  \n+            record = cursor.fetchone()\n+            print(record)\n+            self.tfIdLop.setText(str(record[0]))\n+            self.tfTenMon.setText(str(record[1]))\n+            self.tfThoiGian.setText(str(record[2]) + " - " + str(record[3]))\n+            cursor.close()\n+        except sqlite3.Error as error:\n+            print("Failed to select data from sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+    def exit(self):\n+         main = Main()\n+         widget.addWidget(main)\n+         widget.setCurrentIndex(widget.currentIndex()+1)\n+    def detection(self):\n+        mon = self.cbMon.currentText()\n+        endTime = self.tfEnd.text()\n+        # buoi = self.cbSoBuoi.currentText()\n+        if isRequiredFiled(mon) == False:\n+           self.showdialog("ch\xc6\xb0a ch\xe1\xbb\x8dn bu\xe1\xbb\x95i h\xe1\xbb\x8dc")\n+        # elif isRequiredFiled(buoi) == False:\n+        #     self.showdialog("B\xe1\xba\xa1n ch\xc6\xb0a ch\xe1\xbb\x8dn bu\xe1\xbb\x95i h\xe1\xbb\x8dc")\n+        elif isRequiredFiled(endTime) == False:\n+            self.showdialog("B\xe1\xba\xa1n ch\xc6\xb0a nh\xe1\xba\xadp th\xe1\xbb\x9di gian k\xe1\xba\xbft th\xc3\xbac")\n+        else:\n+            parser = argparse.ArgumentParser()\n+            parser.add_argument(\'--path\', help=\'Path of the video you want to test on.\', default=0)\n+            args = parser.parse_args()\n+\n+            MINSIZE = 20\n+            THRESHOLD = [0.6, 0.7, 0.7]\n+            FACTOR = 0.709\n+            IMAGE_SIZE = 182\n+            INPUT_IMAGE_SIZE = 160\n+            CLASSIFIER_PATH = \'Models/facemodel.pkl\'\n+            VIDEO_PATH = args.path\n+            FACENET_MODEL_PATH = \'Models/20180402-114759.pb\'\n+\n+            # Load The Custom Classifier\n+            with open(CLASSIFIER_PATH, \'rb\') as file:\n+                model, class_names = pickle.load(file)\n+            print("Custom Classifier, Successfully loaded")\n+\n+            with tf.Graph().as_default():\n+\n+                # Cai dat GPU neu co\n+                gpu_options = tf.compat.v1.GPUOptions(per_process_gpu_memory_fraction=0.6)\n+                sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(gpu_options=gpu_options, log_device_placement=False))\n+\n+                with sess.as_default():\n+\n+                    # Load the model\n+                    print(\'Loading feature extraction model\')\n+                    facenet.load_model(FACENET_MODEL_PATH)\n+\n+                    # Get input and output tensors\n+                    images_placeholder = tf.get_default_graph().get_tensor_by_name("input:0")\n+                    embeddings = tf.get_default_graph().get_tensor_by_name("embeddings:0")\n+                    phase_train_placeholder = tf.get_default_graph().get_tensor_by_name("phase_train:0")\n+                    embedding_size = embeddings.get_shape()[1]\n+\n+                    pnet, rnet, onet = src.align.detect_face.create_mtcnn(sess, "src/align")\n+\n+                    # people_detected = set()\n+                    # person_detected = collections.Counter()\n+\n+                    cap  = VideoStream(src=0).start()\n+                    \n+                    list = []\n+\n+                    while (True):\n+                        frame = cap.read()\n+                        frame = imutils.resize(frame, width=600)\n+                        frame = cv2.flip(frame, 1)\n+\n+                        bounding_boxes, _ = src.align.detect_face.detect_face(frame, MINSIZE, pnet, rnet, onet, THRESHOLD, FACTOR)\n+\n+                        faces_found = bounding_boxes.shape[0]\n+                        try:\n+                            if faces_found > 0:\n+                                det = bounding_boxes[:, 0:4]\n+                                bb = np.zeros((faces_found, 4), dtype=np.int32)\n+                                for i in range(faces_found):\n+                                    bb[i][0] = det[i][0]\n+                                    bb[i][1] = det[i][1]\n+                                    bb[i][2] = det[i][2]\n+                                    bb[i][3] = det[i][3]\n+                                    if (bb[i][3]-bb[i][1])/frame.shape[0]>0.25:\n+                                        cropped = frame[bb[i][1]:bb[i][3], bb[i][0]:bb[i][2], :]\n+                                        scaled = cv2.resize(cropped, (INPUT_IMAGE_SIZE, INPUT_IMAGE_SIZE),\n+                                                        interpolation=cv2.INTER_CUBIC)\n+                                        scaled = facenet.prewhiten(scaled)\n+                                        scaled_reshape = scaled.reshape(-1, INPUT_IMAGE_SIZE, INPUT_IMAGE_SIZE, 3)\n+                                        feed_dict = {images_placeholder: scaled_reshape, phase_train_placeholder: False}\n+                                        emb_array = sess.run(embeddings, feed_dict=feed_dict)\n+\n+                                        predictions = model.predict_proba(emb_array)\n+                                        best_class_indices = np.argmax(predictions, axis=1)\n+                                        best_class_probabilities = predictions[\n+                                            np.arange(len(best_class_indices)), best_class_indices]\n+                                        best_name = class_names[best_class_indices[0]]\n+                                        print("Name: {}, Probability: {}".format(best_name, best_class_probabilities))\n+\n+                                        if best_class_probabilities > 0.4:\n+                                            cv2.rectangle(frame, (bb[i][0], bb[i][1]), (bb[i][2], bb[i][3]), (0, 255, 0), 2)\n+                                            text_x = bb[i][0]\n+                                            text_y = bb[i][3] + 20\n+\n+                                            name = class_names[best_class_indices[0]]\n+                                            cv2.putText(frame, name, (text_x, text_y), cv2.FONT_HERSHEY_COMPLEX_SMALL,\n+                                                    1, (255, 255, 255), thickness=1, lineType=2)\n+                                            # cv2.putText(frame, str(round(best_class_probabilities[0], 3)), (text_x, text_y + 17),\n+                                            #         cv2.FONT_HERSHEY_COMPLEX_SMALL,\n+                                            #         1, (255, 255, 255), thickness=1, lineType=2)\n+                                            # person_detected[best_name] += 1\n+                                            if best_name != \'Unknow\' and best_name not in list:\n+                                                count = self.getScheduleId()\n+                                                print(type(count)) \n+                                                list.append(best_name)\n+                                                path = "./image/Photo"  + str(int(count[0]) + 1) +  ".jpg"\n+                                                cv2.imwrite(path, frame)\n+                                                self.photo.setPixmap(QtGui.QPixmap(path))\n+                                                self.photo.setMinimumSize(1, 1)\n+                                                self.photo.setScaledContents(True)\n+                                                now = datetime.now().time()\n+                                                self.markAttendance(best_name, path, now)\n+                                        else:\n+                                            name = "Unknown"\n+                        except:\n+                            pass\n+                        cv2.imshow(\'Face Recognition\', frame)\n+                        if cv2.waitKey(1) & 0xFF == ord(\'q\'):\n+                            self.absent()\n+                            break\n+\n+    def showdialog(self, msg):\n+        QMessageBox.about(self, "Title", msg)\n+    def markAttendance(self, name, path, now):\n+        check = "X"\n+        # lay id sinh vien\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Connected to SQLite")\n+            sqlite_select_query = "SELECT s.id, s.ten from students as s inner join models as m on s.id = m.student_id where m.ten =" + "\'" + name + "\'"\n+            cursor.execute(sqlite_select_query)  \n+            record = cursor.fetchone()\n+            student_id = record[0]\n+            student_name = record[1]  \n+            self.tfIdSV.setText(str(record[0]))\n+            self.tfTenSV.setText(str(record[1]))\n+            self.tfDD.setText(str(now))\n+            cursor.close()\n+        except sqlite3.Error as error:\n+            print("Failed to select data from sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+         # lay id, thoi gian ket thuc schedule        \n+        try:\n+            tenMon = self.cbMon.currentText()\n+            today = datetime.today().strftime(\'%Y-%m-%d\')\n+\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Connected to SQLite")\n+\n+            sqlite_select_query = "SELECT s.id, TIME(s.ketThuc) from schedule as s inner join subjects as m on s.subject_id = m.id where DATE(batDau) =" + "\'" + today + "\'" + "and m.ten = " + "\'" + tenMon + "\'"\n+            cursor.execute(sqlite_select_query)  \n+            record = cursor.fetchone()\n+            schedule_id = record[0]  \n+            end = record[1]\n+            cursor.close()\n+        except sqlite3.Error as error:\n+            print("Failed to select data from sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+        endTime = self.tfEnd.text()\n+        current_time = now.strftime("%H:%M:%S")\n+        stdPhoto =  base64.b85encode(path.encode("utf-8"))\n+        if(current_time < endTime):\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+\n+                sqlite_insert_blob_query = """insert into attendance (schedule_id, student_id, ngayDiemDanh, trangThai, image)  values(?, ?, ?, ?, ?)"""\n+\n+                # Convert data into tuple format\n+                data_tuple = (schedule_id, student_id, today + " " + current_time, check, stdPhoto)\n+                cursor.execute(sqlite_insert_blob_query, data_tuple)\n+                sqliteConnection.commit()\n+                print("Record inserted successfully into table ")\n+                cursor.close()\n+\n+            except sqlite3.Error as error:\n+                print("Failed to insert data into sqlite table" , error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                    print("The SQLite connection is closed")\n+        elif current_time > endTime and current_time < end:\n+            try:\n+                sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                cursor = sqliteConnection.cursor()\n+                print("Successfully Connected to SQLite")\n+                time_object = datetime.strptime(endTime, \'%H:%M:%S\').time()\n+\n+                duration = datetime.combine(date.min, now) - datetime.combine(date.min, time_object)\n+                cursor.execute("INSERT INTO attendance (schedule_id, student_id, ngayDiemDanh, trangThai, image) values(?, ?, ?, ?, ?)", (schedule_id, student_id, today + " " + current_time, "Mu\xe1\xbb\x99n " + str(round(duration.total_seconds() / 60)) + " ph\xc3\xbat", stdPhoto))\n+\n+                sqliteConnection.commit()\n+                print("Record inserted successfully into table ")\n+                cursor.close()\n+\n+            except sqlite3.Error as error:\n+                print("Failed to insert data into sqlite table" , error)\n+            finally:\n+                if sqliteConnection:\n+                    sqliteConnection.close()\n+                    print("The SQLite connection is closed")\n+    def getScheduleId(self):\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Connected to SQLite")\n+\n+            sqlite_select_query = "SELECT id from attendance"\n+            cursor.execute(sqlite_select_query)  \n+            record = cursor.fetchall()    \n+            # get max id\n+            if record :\n+                max_id = max(record)\n+            else:\n+                max_id = 1\n+            cursor.close()\n+            print(max_id)\n+            return max_id\n+        except sqlite3.Error as error:\n+            print("Failed to select data from sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+            print("The SQLite connection is closed")\n+    def absent(self):\n+        try:\n+            tenMon = self.cbMon.currentText()\n+            today = datetime.today().strftime(\'%Y-%m-%d\')\n+\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Connected to SQLite")\n+\n+            sqlite_select_query = "SELECT s.id  from schedule as s inner join subjects as m on s.subject_id = m.id where DATE(batDau) =" + "\'" + today + "\'" + "and m.ten = " + "\'" + tenMon + "\'"\n+            cursor.execute(sqlite_select_query)  \n+            record = cursor.fetchone()\n+            schedule_id = record[0]  # id of schedule\n+            cursor.close()\n+        except sqlite3.Error as error:\n+            print("Failed to select data from sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+        # lay sinh vien khong diem danh\n+        try:\n+            data = ()\n+            list = []\n+\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Connected to SQLite")\n+\n+            sql = "select cm.student_id from schedule as sc inner join class as c on sc.class_id = c.id inner join classMember as cm on cm.class_id = c.id inner join subjects as m on sc.subject_id = m.id  where  DATE(sc.batDau) =\'" + today + "\'" + "and m.ten = \'" + tenMon + "\'" + "EXCEPT select student_id from attendance as a inner join schedule as s on a.schedule_id = s.id  inner join subjects as m on s.subject_id = m.id  where  DATE(s.batDau) = \'" + today + "\'" + "and m.ten = \'" + tenMon + "\'"\n+                                                \n+            for row in cursor.execute(sql):\n+                data = data + (schedule_id, row[0], today, "V\xe1\xba\xafng")\n+                list.append(data)\n+                data = ()\n+            cursor.close()\n+        except sqlite3.Error as error:\n+            print("Failed to select data from sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+        # insert vao bang attendance\n+        try:\n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Connected to SQLite")\n+\n+            cursor.executemany(\'INSERT INTO attendance (schedule_id, student_id, ngayDiemDanh, trangThai) VALUES(?,?,?,?);\', list)\n+\t\t\t\n+            sqliteConnection.commit()\n+            sqliteConnection.close()\n+\n+        except sqlite3.Error as error:\n+            print("Failed to inseart data from sqlite table", error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+    def refresh(self):\n+        self.photo.setPixmap(QtGui.QPixmap(""))\n+        self.tfIdSV.setText("")\n+        self.tfTenSV.setText("")\n+        self.tfDD.setText("")\n+        self.tfIdLop.setText("")\n+        self.tfTenMon.setText("")\n+        self.tfThoiGian.setText("")\n+class Popup(QDialog):\n+    def __init__(self, id, parent):\n+        super().__init__(parent)\n+        self.resize(600, 300)\n+        self.label = QLabel(self)\n+        self.showImage(id)\n+    def showImage(self, id):\n+        try:          \n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+             \n+            cursor.execute("select image from attendance where id = ?", (id,))\n+            record = cursor.fetchone()[0]\n+            if record is not None:\n+                path = base64.b85decode(record).decode("utf-8")\n+                sqliteConnection.commit()\n+                self.label.setPixmap(QtGui.QPixmap(path))\n+                self.label.setMinimumSize(1, 1)\n+                self.label.setScaledContents(True)\n+\n+            cursor.close()\n+        except sqlite3.Error as error:\n+            print("Failed to select data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+class Attendence(QDialog):\n+    def __init__(self):\n+        super(Attendence, self).__init__()\n+        loadUi("./qt designer/quanlythongtindiemdanh.ui",self)\n+        self.btnExit.clicked.connect(self.exit)\n+        self.btnDelete.clicked.connect(self.delete)\n+        self.btnImage.clicked.connect(self.launchPopup)   \n+        self.btnLoadAll.clicked.connect(self.UiComponents)\n+        self.btnRefresh.clicked.connect(self.refresh)\n+        self.btnExport.clicked.connect(self.export)\n+        self.btnFilter.clicked.connect(self.filter)  \n+        self.tableWidget.itemDoubleClicked.connect(self.on_click)\n+        self.btnUpdate.clicked.connect(self.update)\n+        self.btnSearch.clicked.connect(self.search)\n+        self.UiComponents()\n+    def on_click(self, item):\n+        sqliteConnection = sqlite3.connect("D:\\\\code\\\\.vscode\\\\python\\\\simple_facenet\\\\db\\\\userdata.db")\n+        cursor = sqliteConnection.cursor()\n+        print("Successfully Connected to SQLite")\n+\n+        cursor.execute("select a.id, a.student_id, st.ten, c.ten, TIME(s.batDau), TIME(s.ketThuc), a.ngayDiemDanh, a.trangThai from attendance as a inner join schedule as s on a.schedule_id = s.id inner join class as c on s.class_id = c.id inner join students as st on a.student_id = st.id where a.id = ?", (item.text(),))\n+        \n+        sqliteConnection.commit()\n+        rows = cursor.fetchall()\n+\n+        for row in rows:\n+            self.tfIdDiemDanh.setText(str(row[0]))\n+            self.tfIdSV.setText(str(row[1]))\n+            self.tfTenSV.setText(row[2])\n+            self.tfLop.setText(row[3])\n+            self.tfGioVao.setText(row[4])\n+            self.tfGioRa.setText(row[5])\n+            self.tfNgay.setText(row[6])\n+            self.tfDiemDanh.setText(row[7])\n+        cursor.close()\n+    def filter(self):\n+        self.tableWidget.setRowCount(0)\n+        today = date.today()\n+        d1 = today.strftime("%Y-%m-%d")\n+        try:          \n+            sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+            cursor = sqliteConnection.cursor()\n+            print("Successfully Connected to SQLite")\n+             \n+            self.tableWidget.setRowCount(100)\n+            sql = "select a.id, a.student_id, st.ten, c.ten, TIME(s.batDau), TIME(s.ketThuc), a.ngayDiemDanh, a.trangThai from attendance as a inner join schedule as s on a.schedule_id = s.id inner join class as c on s.class_id = c.id inner join students as st on a.student_id = st.id where  DATE(a.ngayDiemDanh) = \'" + d1 + "\'"\n+            tablerow=0\n+            for row in cursor.execute(sql):\n+                self.tableWidget.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+                self.tableWidget.setItem(tablerow,1,QtWidgets.QTableWidgetItem(str(row[1])))\n+                self.tableWidget.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[2]))\n+                self.tableWidget.setItem(tablerow,3,QtWidgets.QTableWidgetItem(row[3]))\n+                self.tableWidget.setItem(tablerow,4,QtWidgets.QTableWidgetItem(row[4]))\n+                self.tableWidget.setItem(tablerow,5,QtWidgets.QTableWidgetItem(row[5]))\n+                self.tableWidget.setItem(tablerow,6,QtWidgets.QTableWidgetItem(row[6]))\n+                self.tableWidget.setItem(tablerow,7,QtWidgets.QTableWidgetItem(row[7]))  \n+                tablerow+=1\n+            sqliteConnection.commit()\n+            \n+            cursor.close()\n+        except sqlite3.Error as error:\n+            print("Failed to select data into sqlite table" , error)\n+        finally:\n+            if sqliteConnection:\n+                sqliteConnection.close()\n+                print("The SQLite connection is closed")\n+    def launchPopup(self):\n+        id = self.tfIdDiemDanh.text()\n+        if isRequiredFiled(id) == False:\n+            self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp \xc4\x91\xe1\xba\xa7y \xc4\x91\xe1\xbb\xa7 th\xc3\xb4ng tin")\n+        else:\n+            self.popup = Popup(id, self)\n+            self.popup.show()\n+    def UiComponents(self):\n+        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+        cursor = sqliteConnection.cursor()\n+        print("Successfully Connected to SQLite")\n+\n+        sql = ("select a.id, a.student_id, st.ten, c.ten, TIME(s.batDau), TIME(s.ketThuc), a.ngayDiemDanh, a.trangThai from attendance as a inner join schedule as s on a.schedule_id = s.id inner join class as c on s.class_id = c.id inner join students as st on a.student_id = st.id")\n+        \n+        self.tableWidget.setRowCount(50)\n+        tablerow = 0\n+        for row in cursor.execute(sql):\n+            self.tableWidget.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+            self.tableWidget.setItem(tablerow,1,QtWidgets.QTableWidgetItem(str(row[1])))\n+            self.tableWidget.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[2]))\n+            self.tableWidget.setItem(tablerow,3,QtWidgets.QTableWidgetItem(row[3]))\n+            self.tableWidget.setItem(tablerow,4,QtWidgets.QTableWidgetItem(row[4]))\n+            self.tableWidget.setItem(tablerow,5,QtWidgets.QTableWidgetItem(row[5]))\n+            self.tableWidget.setItem(tablerow,6,QtWidgets.QTableWidgetItem(row[6]))\n+            self.tableWidget.setItem(tablerow,7,QtWidgets.QTableWidgetItem(row[7]))      \n+            tablerow+=1\n+        sqliteConnection.close()\n+    def delete(self):\n+        ret = QMessageBox.question(self, \'MessageBox\', "C\xc3\xb3 mu\xe1\xbb\x91n x\xc3\xb3a kh\xc3\xb4ng?", QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.Cancel)\n+\n+        if ret == QMessageBox.Yes:\n+            id = self.tfIdDiemDanh.text()\n+            if isRequiredFiled(id) == False:\n+                self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp id")\n+            else:\n+                try:\n+                    sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                    cursor = sqliteConnection.cursor()\n+                    print("Successfully Connected to SQLite")\n+\n+                    cursor.execute("DELETE FROM attendance WHERE id = ?", (id,))\n+                \n+                    sqliteConnection.commit()\n+                    cursor.close()\n+                    self.tableWidget.setRowCount(0)\n+                    self.UiComponents()\n+                    self.refresh()\n+                except sqlite3.Error as error:\n+                    print("Failed to delete data into sqlite table" , error)\n+                finally:\n+                    if sqliteConnection:\n+                        sqliteConnection.close()\n+                    print("The SQLite connection is closed")\n+    def refresh(self):\n+        self.tfIdDiemDanh.setText("")\n+        self.tfIdSV.setText("")\n+        self.tfTenSV.setText("")\n+        self.tfLop.setText("")\n+        self.tfGioVao.setText("")\n+        self.tfGioRa.setText("")\n+        self.tfNgay.setText("")\n+        self.tfDiemDanh.setText("")    \n+    def exit(self):\n+        main = Main()\n+        widget.addWidget(main)\n+        widget.setCurrentIndex(widget.currentIndex()+1)   \n+    def showdialog(self, msg):\n+        QMessageBox.about(self, "Title", msg)\n+    def exit(self):\n+        main = Main()\n+        widget.addWidget(main)\n+        widget.setCurrentIndex(widget.currentIndex()+1)  \n+    def export(self):\n+        rowCount  = self.tableWidget.rowCount()\n+        columnCount  = self.tableWidget.columnCount()\n+        list = []\n+        for row in range(rowCount):\n+            rowData = []\n+            for column in range(columnCount):\n+                widgetItem = self.tableWidget.item(row, column)\n+                if(widgetItem and widgetItem.text):\n+                    rowData.append(widgetItem.text())\n+            if(len(rowData) != 0):\n+                list.append(rowData)\n+        row = 1\n+        col = 0\n+        workbook = xlsxwriter.Workbook("C:\\\\Users\\\\thanh\\\\Downloads\\\\diemdanh.xlsx")\n+ \n+        worksheet = workbook.add_worksheet("My sheet")\n+        worksheet.write(\'A1\', \'ID\')\n+        worksheet.write(\'B1\', \'ID sinh vi\xc3\xaan\')\n+        worksheet.write(\'C1\', \'T\xc3\xaan\')\n+        worksheet.write(\'D1\', \'L\xe1\xbb\x9bp\')\n+        worksheet.write(\'E1\', \'Gi\xe1\xbb\x9d v\xc3\xa0o\')\n+        worksheet.write(\'F1\', \'Gi\xe1\xbb\x9d ra\')\n+        worksheet.write(\'G1\', \'Ng\xc3\xa0y\')\n+        worksheet.write(\'H1\', \'\xc4\x90i\xe1\xbb\x83m danh\')\n+        # Iterate over the data and write it out row by row.\n+        for j in (list):\n+            print(j)\n+            worksheet.write(row, col, j[0])\n+            worksheet.write(row, col + 1, j[1])\n+            worksheet.write(row, col + 2, j[2])\n+            worksheet.write(row, col + 3, j[3])\n+            worksheet.write(row, col + 4, j[4])\n+            worksheet.write(row, col + 5, j[5]) \n+            worksheet.write(row, col + 6, j[6])\n+            worksheet.write(row, col + 7, j[7])\n+            row += 1\n+        workbook.close()\n+        self.showdialog("Ta\xcc\xa3o file excel tha\xcc\x80nh c\xc3\xb4ng")\n+    def search(self):\n+        criteria = self.cbSearch.currentText()\n+        if isRequiredFiled(criteria) == False:\n+            self.showdialog("Vui l\xc3\xb2ng ch\xe1\xbb\x8dn ti\xc3\xaau ch\xc3\xad t\xc3\xacm ki\xe1\xba\xbfm")\n+        else:\n+            if criteria == "ID sinh vi\xc3\xaan":\n+                id = self.tfSearch.text()\n+                if isRequiredFiled(id) == False:\n+                    self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp ID sinh vi\xc3\xaan")\n+                elif isValidInteger(id) == False:\n+                    self.showdialog("ID sinh vi\xc3\xaan ph\xe1\xba\xa3i l\xc3\xa0 s\xe1\xbb\x91")\n+                else:\n+                    self.tableWidget.setRowCount(0)\n+                    try:          \n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+                    \n+                        self.tableWidget.setRowCount(100)\n+                        tablerow=0\n+                        for row in cursor.execute("select a.id, a.student_id, st.ten, c.ten, TIME(s.batDau), TIME(s.ketThuc), a.ngayDiemDanh, a.trangThai from attendance as a inner join schedule as s on a.schedule_id = s.id inner join class as c on s.class_id = c.id inner join students as st on a.student_id = st.id where a.student_id = ?", [id]):\n+                            self.tableWidget.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget.setItem(tablerow,1,QtWidgets.QTableWidgetItem(str(row[1])))\n+                            self.tableWidget.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[2]))\n+                            self.tableWidget.setItem(tablerow,3,QtWidgets.QTableWidgetItem(row[3]))\n+                            self.tableWidget.setItem(tablerow,4,QtWidgets.QTableWidgetItem(row[4]))\n+                            self.tableWidget.setItem(tablerow,5,QtWidgets.QTableWidgetItem(row[5]))\n+                            self.tableWidget.setItem(tablerow,6,QtWidgets.QTableWidgetItem(row[6]))\n+                            self.tableWidget.setItem(tablerow,7,QtWidgets.QTableWidgetItem(row[7]))  \n+                            tablerow+=1\n+                        sqliteConnection.commit()\n+                    \n+                        cursor.close()\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table" , error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+            elif criteria == "T\xc3\xaan sinh vi\xc3\xaan":\n+                ten = self.tfSearch.text()\n+                if isRequiredFiled(ten) == False:\n+                    self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp t\xc3\xaan sinh vi\xc3\xaan")\n+                elif isValidString(ten) == False:\n+                    self.showdialog("T\xc3\xaan sinh vi\xc3\xaan kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87")\n+                else:\n+                    self.tableWidget.setRowCount(0)\n+                    try:          \n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+                        sql = "select a.id, a.student_id, st.ten, c.ten, TIME(s.batDau), TIME(s.ketThuc), a.ngayDiemDanh, a.trangThai from attendance as a inner join schedule as s on a.schedule_id = s.id inner join class as c on s.class_id = c.id inner join students as st on a.student_id = st.id where st.ten like \'%" + ten +  "%\'"\n+                        self.tableWidget.setRowCount(100)\n+                        tablerow=0\n+                        for row in cursor.execute(sql):\n+                            self.tableWidget.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget.setItem(tablerow,1,QtWidgets.QTableWidgetItem(str(row[1])))\n+                            self.tableWidget.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[2]))\n+                            self.tableWidget.setItem(tablerow,3,QtWidgets.QTableWidgetItem(row[3]))\n+                            self.tableWidget.setItem(tablerow,4,QtWidgets.QTableWidgetItem(row[4]))\n+                            self.tableWidget.setItem(tablerow,5,QtWidgets.QTableWidgetItem(row[5]))\n+                            self.tableWidget.setItem(tablerow,6,QtWidgets.QTableWidgetItem(row[6]))\n+                            self.tableWidget.setItem(tablerow,7,QtWidgets.QTableWidgetItem(row[7]))  \n+                            tablerow+=1\n+                        sqliteConnection.commit()\n+                    \n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table" , error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+            elif criteria == "L\xe1\xbb\x9bp":\n+                lop = self.tfSearch.text()\n+                if isRequiredFiled(lop) == False:\n+                    self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp l\xe1\xbb\x9bp")\n+                elif isValidString(lop) == False:\n+                    self.showdialog("L\xe1\xbb\x9bp kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87")\n+                else:\n+                    try:          \n+                        sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                        cursor = sqliteConnection.cursor()\n+                        print("Successfully Connected to SQLite")\n+                        sql = "select a.id, a.student_id, st.ten, c.ten, TIME(s.batDau), TIME(s.ketThuc), a.ngayDiemDanh, a.trangThai from attendance as a inner join schedule as s on a.schedule_id = s.id inner join class as c on s.class_id = c.id inner join students as st on a.student_id = st.id where c.ten like \'%" + lop+  "%\'"\n+                        self.tableWidget.setRowCount(100)\n+                        tablerow=0\n+                        for row in cursor.execute(sql):\n+                            self.tableWidget.setItem(tablerow,0,QtWidgets.QTableWidgetItem(str(row[0])))\n+                            self.tableWidget.setItem(tablerow,1,QtWidgets.QTableWidgetItem(str(row[1])))\n+                            self.tableWidget.setItem(tablerow,2,QtWidgets.QTableWidgetItem(row[2]))\n+                            self.tableWidget.setItem(tablerow,3,QtWidgets.QTableWidgetItem(row[3]))\n+                            self.tableWidget.setItem(tablerow,4,QtWidgets.QTableWidgetItem(row[4]))\n+                            self.tableWidget.setItem(tablerow,5,QtWidgets.QTableWidgetItem(row[5]))\n+                            self.tableWidget.setItem(tablerow,6,QtWidgets.QTableWidgetItem(row[6]))\n+                            self.tableWidget.setItem(tablerow,7,QtWidgets.QTableWidgetItem(row[7]))  \n+                            tablerow+=1\n+                        sqliteConnection.commit()\n+                    \n+                        cursor.close()\n+\n+                    except sqlite3.Error as error:\n+                        print("Failed to select data into sqlite table" , error)\n+                    finally:\n+                        if sqliteConnection:\n+                            sqliteConnection.close()\n+                        print("The SQLite connection is closed")\n+    def update(self):\n+        ret = QMessageBox.question(self, \'MessageBox\', "C\xc3\xb3 mu\xe1\xbb\x91n s\xe1\xbb\xada kh\xc3\xb4ng?", QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.Cancel)\n+\n+        if ret == QMessageBox.Yes:\n+            id = self.tfIdDiemDanh.text()\n+            time = self.tfNgay.text()\n+            diemDanh = self.tfDiemDanh.text()\n+            if isRequiredFiled(id) == False:\n+                self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp id")\n+            elif isRequiredFiled(time) == False:\n+                self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp ng\xc3\xa0y")\n+            elif isValidDateTime(time) == False:\n+                self.showdialog("Ng\xc3\xa0y gi\xe1\xbb\x9d kh\xc3\xb4ng h\xe1\xbb\xa3p l\xe1\xbb\x87")\n+            elif isRequiredFiled(diemDanh) == False:\n+                self.showdialog("Vui l\xc3\xb2ng nh\xe1\xba\xadp tr\xe1\xba\xa1ng th\xc3\xa1i")\n+            else:\n+                try:\n+                    sqliteConnection = sqlite3.connect("C:\\\\Users\\\\thanh\\\\OneDrive\\\\Desktop\\\\facee\\\\db\\\\userdata.db")\n+                    cursor = sqliteConnection.cursor()\n+                    print("Successfully Connected to SQLite")\n+\n+                    cursor.execute("UPDATE attendance set ngayDiemDanh = ?, trangThai = ? where id = ?", (time, diemDanh, id))\n+                    sqliteConnection.commit()\n+                    cursor.close()\n+                    self.showdialog("S\xe1\xbb\xada th\xc3\xa0nh c\xc3\xb4ng")\n+                    self.tableWidget.setRowCount(0)\n+                    self.UiComponents()\n+                    self.refresh()\n+                except sqlite3.Error as error:\n+                    print("Failed to update data into sqlite table" , error)\n+                finally:\n+                    if sqliteConnection:\n+                        sqliteConnection.close()\n+                    print("The SQLite connection is closed")\n+class Analyst(QDialog):\n+    def __init__(self):\n+        super(Analyst, self).__init__()\n+        loadUi("./qt designer/thongke.ui",self)\n+        self.btnExit.clicked.connect(self.exit)\n+    def exit(self):\n+        main = Main()\n+        widget.addWidget(main)\n+        widget.setCurrentIndex(widget.currentIndex()+1)\n+app = QApplication(sys.argv)\n+login = LoginScreen()\n+widget = QtWidgets.QStackedWidget()\n+widget.addWidget(login)\n+widget.setFixedHeight(841)\n+widget.setFixedWidth(1291)\n+widget.show()\n+app.exec_()\n\\ No newline at end of file\ndiff --git a/src/__pycache__/facenet.cpython-37.pyc b/src/__pycache__/facenet.cpython-37.pyc\nindex 3b10b34..f536609 100644\nBinary files a/src/__pycache__/facenet.cpython-37.pyc and b/src/__pycache__/facenet.cpython-37.pyc differ\ndiff --git a/src/align/__pycache__/detect_face.cpython-37.pyc b/src/align/__pycache__/detect_face.cpython-37.pyc\nindex 4692c43..ec7b52c 100644\nBinary files a/src/align/__pycache__/detect_face.cpython-37.pyc and b/src/align/__pycache__/detect_face.cpython-37.pyc differ\ndiff --git a/src/align/detect_face.py b/src/align/detect_face.py\nindex 2300ff3..46debe0 100644\n--- a/src/align/detect_face.py\n+++ b/src/align/detect_face.py\n@@ -198,13 +198,6 @@ class Network(object):\n             fc = op(feed_in, weights, biases, name=name)\n             return fc\n \n-\n-    """\n-    Multi dimensional softmax,\n-    refer to https://github.com/tensorflow/tensorflow/issues/210\n-    compute softmax along the dimension of target\n-    the native softmax only supports batch_size x dimension\n-    """\n     @layer\n     def softmax(self, target, axis, name=None):\n         max_axis = tf.reduce_max(target, axis, keepdims=True)\ndiff --git a/src/align_dataset_mtcnn.py b/src/align_dataset_mtcnn.py\nindex 27d460b..1065d82 100644\n--- a/src/align_dataset_mtcnn.py\n+++ b/src/align_dataset_mtcnn.py\n@@ -31,28 +31,35 @@ import os\n import argparse\n import tensorflow as tf\n import numpy as np\n-import facenet\n-import align.detect_face\n+from facenet import *\n+from src.align.detect_face import *\n import random\n from time import sleep\n+from .facenet import *\n \n-def main(args):\n+def align_mtcnn(input_dir,\n+                  output_dir,\n+                  image_size=160,\n+                  margin=32,\n+                  random_order=None,\n+                  gpu_memory_fraction=0.5,\n+                  detect_multiple_faces=False):\n     sleep(random.random())\n-    output_dir = os.path.expanduser(args.output_dir)\n+    output_dir = os.path.expanduser(output_dir)\n     if not os.path.exists(output_dir):\n         os.makedirs(output_dir)\n     # Store some git revision info in a text file in the log directory\n     src_path,_ = os.path.split(os.path.realpath(__file__))\n-    facenet.store_revision_info(src_path, output_dir, \' \'.join(sys.argv))\n-    dataset = facenet.get_dataset(args.input_dir)\n+    store_revision_info(src_path, output_dir, \' \'.join(sys.argv))\n+    dataset = get_dataset(input_dir)\n     \n     print(\'Creating networks and loading parameters\')\n     \n     with tf.Graph().as_default():\n-        #gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=args.gpu_memory_fraction)\n+        gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=gpu_memory_fraction)\n         sess = tf.compat.v1.Session()#config=tf.ConfigProto())#gpu_options=gpu_options, log_device_placement=False))\n         with sess.as_default():\n-            pnet, rnet, onet = align.detect_face.create_mtcnn(sess, None)\n+            pnet, rnet, onet = create_mtcnn(sess, None)\n     \n     minsize = 20 # minimum size of face\n     threshold = [ 0.6, 0.7, 0.7 ]  # three steps\'s threshold\n@@ -65,13 +72,13 @@ def main(args):\n     with open(bounding_boxes_filename, "w") as text_file:\n         nrof_images_total = 0\n         nrof_successfully_aligned = 0\n-        if args.random_order:\n+        if random_order:\n             random.shuffle(dataset)\n         for cls in dataset:\n             output_class_dir = os.path.join(output_dir, cls.name)\n             if not os.path.exists(output_class_dir):\n                 os.makedirs(output_class_dir)\n-                if args.random_order:\n+                if random_order:\n                     random.shuffle(cls.image_paths)\n             for image_path in cls.image_paths:\n                 nrof_images_total += 1\n@@ -91,17 +98,17 @@ def main(args):\n                             text_file.write(\'%s\\n\' % (output_filename))\n                             continue\n                         if img.ndim == 2:\n-                            img = facenet.to_rgb(img)\n+                            img = to_rgb(img)\n                         img = img[:,:,0:3]\n     \n-                        bounding_boxes, _ = align.detect_face.detect_face(img, minsize, pnet, rnet, onet, threshold, factor)\n+                        bounding_boxes, _ = detect_face(img, minsize, pnet, rnet, onet, threshold, factor)\n                         nrof_faces = bounding_boxes.shape[0]\n                         if nrof_faces>0:\n                             det = bounding_boxes[:,0:4]\n                             det_arr = []\n                             img_size = np.asarray(img.shape)[0:2]\n                             if nrof_faces>1:\n-                                if args.detect_multiple_faces:\n+                                if detect_multiple_faces:\n                                     for i in range(nrof_faces):\n                                         det_arr.append(np.squeeze(det[i]))\n                                 else:\n@@ -117,17 +124,17 @@ def main(args):\n                             for i, det in enumerate(det_arr):\n                                 det = np.squeeze(det)\n                                 bb = np.zeros(4, dtype=np.int32)\n-                                bb[0] = np.maximum(det[0]-args.margin/2, 0)\n-                                bb[1] = np.maximum(det[1]-args.margin/2, 0)\n-                                bb[2] = np.minimum(det[2]+args.margin/2, img_size[1])\n-                                bb[3] = np.minimum(det[3]+args.margin/2, img_size[0])\n+                                bb[0] = np.maximum(det[0]-margin/2, 0)\n+                                bb[1] = np.maximum(det[1]-margin/2, 0)\n+                                bb[2] = np.minimum(det[2]+margin/2, img_size[1])\n+                                bb[3] = np.minimum(det[3]+margin/2, img_size[0])\n                                 cropped = img[bb[1]:bb[3],bb[0]:bb[2],:]\n                                 from PIL import Image\n                                 cropped = Image.fromarray(cropped)\n-                                scaled = cropped.resize((args.image_size, args.image_size), Image.BILINEAR)\n+                                scaled = cropped.resize((image_size, image_size), Image.BILINEAR)\n                                 nrof_successfully_aligned += 1\n                                 filename_base, file_extension = os.path.splitext(output_filename)\n-                                if args.detect_multiple_faces:\n+                                if detect_multiple_faces:\n                                     output_filename_n = "{}_{}{}".format(filename_base, i, file_extension)\n                                 else:\n                                     output_filename_n = "{}{}".format(filename_base, file_extension)\n@@ -139,24 +146,4 @@ def main(args):\n                             \n     print(\'Total number of images: %d\' % nrof_images_total)\n     print(\'Number of successfully aligned images: %d\' % nrof_successfully_aligned)\n-            \n-\n-def parse_arguments(argv):\n-    parser = argparse.ArgumentParser()\n-    \n-    parser.add_argument(\'input_dir\', type=str, help=\'Directory with unaligned images.\')\n-    parser.add_argument(\'output_dir\', type=str, help=\'Directory with aligned face thumbnails.\')\n-    parser.add_argument(\'--image_size\', type=int,\n-        help=\'Image size (height, width) in pixels.\', default=182)\n-    parser.add_argument(\'--margin\', type=int,\n-        help=\'Margin for the crop around the bounding box (height, width) in pixels.\', default=44)\n-    parser.add_argument(\'--random_order\', \n-        help=\'Shuffles the order of images to enable alignment using multiple processes.\', action=\'store_true\')\n-    parser.add_argument(\'--gpu_memory_fraction\', type=float,\n-        help=\'Upper bound on the amount of GPU memory that will be used by the process.\', default=1.0)\n-    parser.add_argument(\'--detect_multiple_faces\', type=bool,\n-                        help=\'Detect and align multiple faces per image.\', default=False)\n-    return parser.parse_args(argv)\n-\n-if __name__ == \'__main__\':\n-    main(parse_arguments(sys.argv[1:]))\n+            \n\\ No newline at end of file\ndiff --git a/src/classifier.py b/src/classifier.py\nindex 6a176a4..81f1489 100644\n--- a/src/classifier.py\n+++ b/src/classifier.py\n@@ -26,6 +26,8 @@ from __future__ import absolute_import\n from __future__ import division\n from __future__ import print_function\n \n+from datetime import timedelta\n+\n import tensorflow as tf\n import numpy as np\n import argparse\n@@ -35,136 +37,128 @@ import sys\n import math\n import pickle\n from sklearn.svm import SVC\n+from timeit import default_timer as timer\n+from .facenet import *\n+from src.align_dataset_mtcnn import *\n \n-def main(args):\n-  \n+def trainClassifier(data_dir,\n+                    model,\n+                    classifier_filename,\n+                    use_split_dataset=None,\n+                    batch_size=1000,\n+                    image_size=160,\n+                    seed=666,\n+                    min_nrof_images_per_class=20,\n+                    nrof_train_images_per_class=10):\n     with tf.Graph().as_default():\n-      \n+\n         with tf.compat.v1.Session() as sess:\n-            \n-            np.random.seed(seed=args.seed)\n-            \n-            if args.use_split_dataset:\n-                dataset_tmp = facenet.get_dataset(args.data_dir)\n-                train_set, test_set = split_dataset(dataset_tmp, args.min_nrof_images_per_class, args.nrof_train_images_per_class)\n-                if (args.mode==\'TRAIN\'):\n-                    dataset = train_set\n-                elif (args.mode==\'CLASSIFY\'):\n-                    dataset = test_set\n+\n+            np.random.seed(seed=seed)\n+\n+            if use_split_dataset:\n+                dataset_tmp = get_dataset(data_dir)\n+                train_set, test_set = split_dataset(dataset_tmp, min_nrof_images_per_class, nrof_train_images_per_class)\n+                dataset = train_set\n             else:\n-                dataset = facenet.get_dataset(args.data_dir)\n+                dataset = get_dataset(data_dir)\n \n             # Check that there are at least one training image per class\n             for cls in dataset:\n-                assert(len(cls.image_paths)>0, \'There must be at least one image for each class in the dataset\')\n+                assert (len(cls.image_paths) > 0, \'There must be at least one image for each class in the dataset\')\n+\n+            paths, labels = get_image_paths_and_labels(dataset)\n \n-                 \n-            paths, labels = facenet.get_image_paths_and_labels(dataset)\n-            \n             print(\'Number of classes: %d\' % len(dataset))\n             print(\'Number of images: %d\' % len(paths))\n-            \n+\n             # Load the model\n             print(\'Loading feature extraction model\')\n-            facenet.load_model(args.model)\n-            \n+            load_model(model)\n+\n             # Get input and output tensors\n             images_placeholder = tf.compat.v1.get_default_graph().get_tensor_by_name("input:0")\n             embeddings = tf.compat.v1.get_default_graph().get_tensor_by_name("embeddings:0")\n             phase_train_placeholder = tf.compat.v1.get_default_graph().get_tensor_by_name("phase_train:0")\n             embedding_size = embeddings.get_shape()[1]\n-            \n+\n             # Run forward pass to calculate embeddings\n             print(\'Calculating features for images\')\n             nrof_images = len(paths)\n-            nrof_batches_per_epoch = int(math.ceil(1.0*nrof_images / args.batch_size))\n+            nrof_batches_per_epoch = int(math.ceil(1.0 * nrof_images / batch_size))\n             emb_array = np.zeros((nrof_images, embedding_size))\n             for i in range(nrof_batches_per_epoch):\n-                start_index = i*args.batch_size\n-                end_index = min((i+1)*args.batch_size, nrof_images)\n+                start_index = i * batch_size\n+                end_index = min((i + 1) * batch_size, nrof_images)\n                 paths_batch = paths[start_index:end_index]\n-                images = facenet.load_data(paths_batch, False, False, args.image_size)\n-                feed_dict = { images_placeholder:images, phase_train_placeholder:False }\n-                emb_array[start_index:end_index,:] = sess.run(embeddings, feed_dict=feed_dict)\n-            \n-            classifier_filename_exp = os.path.expanduser(args.classifier_filename)\n-\n-            if (args.mode==\'TRAIN\'):\n-                # Train classifier\n-                print(\'Training classifier\')\n-                model = SVC(kernel=\'linear\', probability=True)\n-                model.fit(emb_array, labels)\n-            \n-                # Create a list of class names\n-                class_names = [ cls.name.replace(\'_\', \' \') for cls in dataset]\n-\n-                # Saving classifier model\n-                with open(classifier_filename_exp, \'wb\') as outfile:\n-                    pickle.dump((model, class_names), outfile)\n-                print(\'Saved classifier model to file "%s"\' % classifier_filename_exp)\n-                \n-            elif (args.mode==\'CLASSIFY\'):\n-                # Classify images\n-                print(\'Testing classifier\')\n-                with open(classifier_filename_exp, \'rb\') as infile:\n-                    (model, class_names) = pickle.load(infile)\n-\n-                print(\'Loaded classifier model from file "%s"\' % classifier_filename_exp)\n-\n-                predictions = model.predict_proba(emb_array)\n-                best_class_indices = np.argmax(predictions, axis=1)\n-                best_class_probabilities = predictions[np.arange(len(best_class_indices)), best_class_indices]\n-                \n-                for i in range(len(best_class_indices)):\n-                    print(\'%4d  %s: %.3f\' % (i, class_names[best_class_indices[i]], best_class_probabilities[i]))\n-                    \n-                accuracy = np.mean(np.equal(best_class_indices, labels))\n-                print(\'Accuracy: %.3f\' % accuracy)\n-                \n-            \n+                images = load_data(paths_batch, False, False, image_size)\n+                feed_dict = {images_placeholder: images, phase_train_placeholder: False}\n+                emb_array[start_index:end_index, :] = sess.run(embeddings, feed_dict=feed_dict)\n+\n+            classifier_filename_exp = os.path.expanduser(classifier_filename)\n+\n+            print(\'Training classifier\')\n+            model = SVC(kernel=\'linear\', probability=True)\n+            model.fit(emb_array, labels)\n+\n+            # Create a list of class names\n+            class_names = [cls.name.replace(\'_\', \' \') for cls in dataset]\n+\n+            # Saving classifier model\n+            with open(classifier_filename_exp, \'wb\') as outfile:\n+                pickle.dump((model, class_names), outfile)\n+            print(\'Saved classifier model to file "%s"\' % classifier_filename_exp)\n+\n+\n def split_dataset(dataset, min_nrof_images_per_class, nrof_train_images_per_class):\n     train_set = []\n     test_set = []\n     for cls in dataset:\n         paths = cls.image_paths\n         # Remove classes with less than min_nrof_images_per_class\n-        if len(paths)>=min_nrof_images_per_class:\n+        if len(paths) >= min_nrof_images_per_class:\n             np.random.shuffle(paths)\n-            train_set.append(facenet.ImageClass(cls.name, paths[:nrof_train_images_per_class]))\n-            test_set.append(facenet.ImageClass(cls.name, paths[nrof_train_images_per_class:]))\n+            train_set.append(ImageClass(cls.name, paths[:nrof_train_images_per_class]))\n+            test_set.append(ImageClass(cls.name, paths[nrof_train_images_per_class:]))\n     return train_set, test_set\n \n-            \n-def parse_arguments(argv):\n-    parser = argparse.ArgumentParser()\n-    \n-    parser.add_argument(\'mode\', type=str, choices=[\'TRAIN\', \'CLASSIFY\'],\n-        help=\'Indicates if a new classifier should be trained or a classification \' + \n-        \'model should be used for classification\', default=\'CLASSIFY\')\n-    parser.add_argument(\'data_dir\', type=str,\n-        help=\'Path to the data directory containing aligned LFW face patches.\')\n-    parser.add_argument(\'model\', type=str, \n-        help=\'Could be either a directory containing the meta_file and ckpt_file or a model protobuf (.pb) file\')\n-    parser.add_argument(\'classifier_filename\', \n-        help=\'Classifier model file name as a pickle (.pkl) file. \' + \n-        \'For training this is the output and for classification this is an input.\')\n-    parser.add_argument(\'--use_split_dataset\', \n-        help=\'Indicates that the dataset specified by data_dir should be split into a training and test set. \' +  \n-        \'Otherwise a separate test set can be specified using the test_data_dir option.\', action=\'store_true\')\n-    parser.add_argument(\'--test_data_dir\', type=str,\n-        help=\'Path to the test data directory containing aligned images used for testing.\')\n-    parser.add_argument(\'--batch_size\', type=int,\n-        help=\'Number of images to process in a batch.\', default=90)\n-    parser.add_argument(\'--image_size\', type=int,\n-        help=\'Image size (height, width) in pixels.\', default=160)\n-    parser.add_argument(\'--seed\', type=int,\n-        help=\'Random seed.\', default=666)\n-    parser.add_argument(\'--min_nrof_images_per_class\', type=int,\n-        help=\'Only include classes with at least this number of images in the dataset\', default=20)\n-    parser.add_argument(\'--nrof_train_images_per_class\', type=int,\n-        help=\'Use this number of images from each class for training and the rest for testing\', default=10)\n-    \n-    return parser.parse_args(argv)\n \n+# def parse_arguments(argv):\n+#     parser = argparse.ArgumentParser()  \n+#\n+#     parser.add_argument(\'mode\', type=str, choices=[\'TRAIN\', \'CLASSIFY\'],\n+#         help=\'Indicates if a new classifier should be trained or a classification \' +\n+#         \'model should be used for classification\', default=\'CLASSIFY\')\n+#     parser.add_argument(\'data_dir\', type=str,\n+#         help=\'Path to the data directory containing aligned LFW face patches.\')\n+#     parser.add_argument(\'model\', type=str,\n+#         help=\'Could be either a directory containing the meta_file and ckpt_file or a model protobuf (.pb) file\')\n+#     parser.add_argument(\'classifier_filename\',\n+#         help=\'Classifier model file name as a pickle (.pkl) file. \' +\n+#         \'For training this is the output and for classification this is an input.\')\n+#     parser.add_argument(\'--use_split_dataset\',\n+#         help=\'Indicates that the dataset specified by data_dir should be split into a training and test set. \' +\n+#         \'Otherwise a separate test set can be specified using the test_data_dir option.\', action=\'store_true\')\n+#     parser.add_argument(\'--test_data_dir\', type=str,\n+#         help=\'Path to the test data directory containing aligned images used for testing.\')\n+#     parser.add_argument(\'--batch_size\', type=int,\n+#         help=\'Number of images to process in a batch.\', default=90)\n+#     parser.add_argument(\'--image_size\', type=int,\n+#         help=\'Image size (height, width) in pixels.\', default=160)\n+#     parser.add_argument(\'--seed\', type=int,\n+#         help=\'Random seed.\', default=666)\n+#     parser.add_argument(\'--min_nrof_images_per_class\', type=int,\n+#         help=\'Only include classes with at least this number of images in the dataset\', default=20)\n+#     parser.add_argument(\'--nrof_train_images_per_class\', type=int,\n+#         help=\'Use this number of images from each class for training and the rest for testing\', default=10)\n+#\n+#     return parser.parse_args(argv)\n+#\n+# if __name__ == \'__main__\':\n+#     main(parse_arguments(sys.argv[1:]))\n if __name__ == \'__main__\':\n-    main(parse_arguments(sys.argv[1:]))\n+    start = timer()\n+    align_mtcnn(\'DataSet/FaceData/raw\', \'DataSet/FaceData/processed\')\n+    trainClassifier(\'DataSet/FaceData/processed\', \'Models/20180402-114759.pb\', \'Models/your_model.pkl\')\n+    end = timer()\n+    print(timedelta(seconds=end - start))\n\\ No newline at end of file\ndiff --git a/src/face_rec_cam.py b/src/face_rec_cam.py\nindex 1a425a5..16b960d 100644\n--- a/src/face_rec_cam.py\n+++ b/src/face_rec_cam.py\n@@ -4,8 +4,6 @@ from __future__ import print_function\n \n import tensorflow as tf\n from imutils.video import VideoStream\n-\n-\n import argparse\n import facenet\n import imutils\n@@ -13,122 +11,138 @@ import os\n import sys\n import math\n import pickle\n-import align.detect_face\n+import src.align.detect_face\n import numpy as np\n import cv2\n import collections\n+from src import facenet\n+from src import align\n from sklearn.svm import SVC\n-\n-\n-def main():\n-    parser = argparse.ArgumentParser()\n-    parser.add_argument(\'--path\', help=\'Path of the video you want to test on.\', default=0)\n-    args = parser.parse_args()\n-\n-    MINSIZE = 20\n-    THRESHOLD = [0.6, 0.7, 0.7]\n-    FACTOR = 0.709\n-    IMAGE_SIZE = 182\n-    INPUT_IMAGE_SIZE = 160\n-    CLASSIFIER_PATH = \'Models/facemodel.pkl\'\n-    VIDEO_PATH = args.path\n-    FACENET_MODEL_PATH = \'Models/20180402-114759.pb\'\n-\n-    # Load The Custom Classifier\n-    with open(CLASSIFIER_PATH, \'rb\') as file:\n-        model, class_names = pickle.load(file)\n-    print("Custom Classifier, Successfully loaded")\n-\n-    with tf.Graph().as_default():\n-\n-        # Cai dat GPU neu co\n-        gpu_options = tf.compat.v1.GPUOptions(per_process_gpu_memory_fraction=0.6)\n-        sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(gpu_options=gpu_options, log_device_placement=False))\n-\n-        with sess.as_default():\n-\n-            # Load the model\n-            print(\'Loading feature extraction model\')\n-            facenet.load_model(FACENET_MODEL_PATH)\n-\n-            # Get input and output tensors\n-            images_placeholder = tf.get_default_graph().get_tensor_by_name("input:0")\n-            embeddings = tf.get_default_graph().get_tensor_by_name("embeddings:0")\n-            phase_train_placeholder = tf.get_default_graph().get_tensor_by_name("phase_train:0")\n-            embedding_size = embeddings.get_shape()[1]\n-\n-            pnet, rnet, onet = align.detect_face.create_mtcnn(sess, "src/align")\n-\n-            people_detected = set()\n-            person_detected = collections.Counter()\n-\n-            cap  = VideoStream(src=0).start()\n-\n-            while (True):\n-                frame = cap.read()\n-                frame = imutils.resize(frame, width=600)\n-                frame = cv2.flip(frame, 1)\n-\n-                bounding_boxes, _ = align.detect_face.detect_face(frame, MINSIZE, pnet, rnet, onet, THRESHOLD, FACTOR)\n-\n-                faces_found = bounding_boxes.shape[0]\n-                try:\n-                    if faces_found > 1:\n-                        cv2.putText(frame, "Only one face", (0, 100), cv2.FONT_HERSHEY_COMPLEX_SMALL,\n-                                    1, (255, 255, 255), thickness=1, lineType=2)\n-                    elif faces_found > 0:\n-                        det = bounding_boxes[:, 0:4]\n-                        bb = np.zeros((faces_found, 4), dtype=np.int32)\n-                        for i in range(faces_found):\n-                            bb[i][0] = det[i][0]\n-                            bb[i][1] = det[i][1]\n-                            bb[i][2] = det[i][2]\n-                            bb[i][3] = det[i][3]\n-                            print(bb[i][3]-bb[i][1])\n-                            print(frame.shape[0])\n-                            print((bb[i][3]-bb[i][1])/frame.shape[0])\n-                            if (bb[i][3]-bb[i][1])/frame.shape[0]>0.25:\n-                                cropped = frame[bb[i][1]:bb[i][3], bb[i][0]:bb[i][2], :]\n-                                scaled = cv2.resize(cropped, (INPUT_IMAGE_SIZE, INPUT_IMAGE_SIZE),\n-                                                    interpolation=cv2.INTER_CUBIC)\n-                                scaled = facenet.prewhiten(scaled)\n-                                scaled_reshape = scaled.reshape(-1, INPUT_IMAGE_SIZE, INPUT_IMAGE_SIZE, 3)\n-                                feed_dict = {images_placeholder: scaled_reshape, phase_train_placeholder: False}\n-                                emb_array = sess.run(embeddings, feed_dict=feed_dict)\n-\n-                                predictions = model.predict_proba(emb_array)\n-                                best_class_indices = np.argmax(predictions, axis=1)\n-                                best_class_probabilities = predictions[\n-                                    np.arange(len(best_class_indices)), best_class_indices]\n-                                best_name = class_names[best_class_indices[0]]\n-                                print("Name: {}, Probability: {}".format(best_name, best_class_probabilities))\n-\n-\n-\n-                                if best_class_probabilities > 0.8:\n-                                    cv2.rectangle(frame, (bb[i][0], bb[i][1]), (bb[i][2], bb[i][3]), (0, 255, 0), 2)\n-                                    text_x = bb[i][0]\n-                                    text_y = bb[i][3] + 20\n-\n-                                    name = class_names[best_class_indices[0]]\n-                                    cv2.putText(frame, name, (text_x, text_y), cv2.FONT_HERSHEY_COMPLEX_SMALL,\n-                                                1, (255, 255, 255), thickness=1, lineType=2)\n-                                    cv2.putText(frame, str(round(best_class_probabilities[0], 3)), (text_x, text_y + 17),\n-                                                cv2.FONT_HERSHEY_COMPLEX_SMALL,\n-                                                1, (255, 255, 255), thickness=1, lineType=2)\n-                                    person_detected[best_name] += 1\n-                                else:\n-                                    name = "Unknown"\n-\n-                except:\n-                    pass\n-\n-                cv2.imshow(\'Face Recognition\', frame)\n-                if cv2.waitKey(1) & 0xFF == ord(\'q\'):\n-                    break\n-\n-            cap.release()\n-            cv2.destroyAllWindows()\n-\n-\n-main()\n+from validator.validate import *\n+from PyQt5.QtWidgets import QApplication, QDialog, QFileDialog, QWidget, QMessageBox, QFileSystemModel, QTreeView, QVBoxLayout, QProgressBar, QLabel, QFrame, QSplashScreen\n+\n+class Detections(QDialog):\n+    def __init__(self):\n+        super(Detections, self).__init__()\n+\n+    def showdialog(self, msg):\n+        QMessageBox.about(self, "Title", msg)\n+\n+    def detection(self, tenMon, endTime, buoi):\n+        if isRequiredFiled(tenMon) == False:\n+           self.showdialog("ch\xc6\xb0a ch\xe1\xbb\x8dn bu\xe1\xbb\x95i h\xe1\xbb\x8dc")\n+        elif isRequiredFiled(buoi) == False:\n+            self.showdialog("B\xe1\xba\xa1n ch\xc6\xb0a ch\xe1\xbb\x8dn bu\xe1\xbb\x95i h\xe1\xbb\x8dc")\n+        elif isRequiredFiled(endTime) == False:\n+            self.showdialog("B\xe1\xba\xa1n ch\xc6\xb0a nh\xe1\xba\xadp th\xe1\xbb\x9di gian k\xe1\xba\xbft th\xc3\xbac")\n+        else:\n+            parser = argparse.ArgumentParser()\n+            parser.add_argument(\'--path\', help=\'Path of the video you want to test on.\', default=0)\n+            args = parser.parse_args()\n+\n+            MINSIZE = 20\n+            THRESHOLD = [0.8, 0.9, 0.9]\n+            FACTOR = 0.709\n+            IMAGE_SIZE = 182\n+            INPUT_IMAGE_SIZE = 160\n+            CLASSIFIER_PATH = \'Models/facemodel.pkl\'\n+            VIDEO_PATH = args.path\n+            FACENET_MODEL_PATH = \'Models/20180402-114759.pb\'\n+\n+            # Load The Custom Classifier\n+            with open(CLASSIFIER_PATH, \'rb\') as file:\n+                model, class_names = pickle.load(file)\n+            print("Custom Classifier, Successfully loaded")\n+\n+            with tf.Graph().as_default():\n+\n+                # Cai dat GPU neu co\n+                gpu_options = tf.compat.v1.GPUOptions(per_process_gpu_memory_fraction=0.7)\n+                sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(gpu_options=gpu_options, log_device_placement=False))\n+\n+                with sess.as_default():\n+\n+                    # Load the model\n+                    print(\'Loading feature extraction model\')\n+                    facenet.load_model(FACENET_MODEL_PATH)\n+\n+                    # Get input and output tensors\n+                    images_placeholder = tf.get_default_graph().get_tensor_by_name("input:0")\n+                    embeddings = tf.get_default_graph().get_tensor_by_name("embeddings:0")\n+                    phase_train_placeholder = tf.get_default_graph().get_tensor_by_name("phase_train:0")\n+                    embedding_size = embeddings.get_shape()[1]\n+\n+                    pnet, rnet, onet = align.detect_face.create_mtcnn(sess, "src/align")\n+\n+                    people_detected = set()\n+                    person_detected = collections.Counter()\n+\n+                    cap  = VideoStream(src=0).start()\n+\n+                    while (True):\n+                        frame = cap.read()\n+                        frame = imutils.resize(frame, width=600)\n+                        frame = cv2.flip(frame, 1)\n+\n+                        bounding_boxes, _ = src.align.detect_face.detect_face(frame, MINSIZE, pnet, rnet, onet, THRESHOLD, FACTOR)\n+\n+                        faces_found = bounding_boxes.shape[0]\n+                        try:\n+                            if faces_found > 1:\n+                                cv2.putText(frame, "Only one face", (0, 100), cv2.FONT_HERSHEY_COMPLEX_SMALL,\n+                                        1, (255, 255, 255), thickness=1, lineType=2)\n+                            elif faces_found > 0:\n+                                det = bounding_boxes[:, 0:4]\n+                                bb = np.zeros((faces_found, 4), dtype=np.int32)\n+                                for i in range(faces_found):\n+                                    bb[i][0] = det[i][0]\n+                                    bb[i][1] = det[i][1]\n+                                    bb[i][2] = det[i][2]\n+                                    bb[i][3] = det[i][3]\n+                                    print(bb[i][3]-bb[i][1])\n+                                    print(frame.shape[0])\n+                                    print((bb[i][3]-bb[i][1])/frame.shape[0])\n+                                    if (bb[i][3]-bb[i][1])/frame.shape[0]>0.25:\n+                                        cropped = frame[bb[i][1]:bb[i][3], bb[i][0]:bb[i][2], :]\n+                                        scaled = cv2.resize(cropped, (INPUT_IMAGE_SIZE, INPUT_IMAGE_SIZE),\n+                                                        interpolation=cv2.INTER_CUBIC)\n+                                        scaled = facenet.prewhiten(scaled)\n+                                        scaled_reshape = scaled.reshape(-1, INPUT_IMAGE_SIZE, INPUT_IMAGE_SIZE, 3)\n+                                        feed_dict = {images_placeholder: scaled_reshape, phase_train_placeholder: False}\n+                                        emb_array = sess.run(embeddings, feed_dict=feed_dict)\n+\n+                                        predictions = model.predict_proba(emb_array)\n+                                        best_class_indices = np.argmax(predictions, axis=1)\n+                                        best_class_probabilities = predictions[\n+                                            np.arange(len(best_class_indices)), best_class_indices]\n+                                        best_name = class_names[best_class_indices[0]]\n+                                        print("Name: {}, Probability: {}".format(best_name, best_class_probabilities))\n+\n+\n+\n+                                        if best_class_probabilities > 0.6:\n+                                            cv2.rectangle(frame, (bb[i][0], bb[i][1]), (bb[i][2], bb[i][3]), (0, 255, 0), 2)\n+                                            text_x = bb[i][0]\n+                                            text_y = bb[i][3] + 20\n+\n+                                            name = class_names[best_class_indices[0]]\n+                                            cv2.putText(frame, name, (text_x, text_y), cv2.FONT_HERSHEY_COMPLEX_SMALL,\n+                                                    1, (255, 255, 255), thickness=1, lineType=2)\n+                                            cv2.putText(frame, str(round(best_class_probabilities[0], 3)), (text_x, text_y + 17),\n+                                                    cv2.FONT_HERSHEY_COMPLEX_SMALL,\n+                                                    1, (255, 255, 255), thickness=1, lineType=2)\n+                                            person_detected[best_name] += 1\n+                                            path = "./image/Photo" + ".jpg"\n+                                            cv2.imwrite(path, frame)\n+                                        else:\n+                                            name = "Unknown"\n+\n+                        except:\n+                            pass\n+\n+                        cv2.imshow(\'Face Recognition\', frame)\n+                        if cv2.waitKey(1) & 0xFF == ord(\'q\'):\n+                            break\n+\n+                    cap.release()\n+                    cv2.destroyAllWindows()   \n\\ No newline at end of file'